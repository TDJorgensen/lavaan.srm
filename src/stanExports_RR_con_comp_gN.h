// Generated by rstantools.  Do not edit by hand.

/*
    lavaan.srm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    lavaan.srm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with lavaan.srm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_RR_con_comp_gN_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'RR_con_comp_gN', line 46, column 0 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 48, column 2 to column 28)",
                                                      " (in 'RR_con_comp_gN', line 49, column 2 to column 29)",
                                                      " (in 'RR_con_comp_gN', line 51, column 2 to column 39)",
                                                      " (in 'RR_con_comp_gN', line 56, column 2 to column 41)",
                                                      " (in 'RR_con_comp_gN', line 58, column 2 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 59, column 2 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 60, column 2 to column 29)",
                                                      " (in 'RR_con_comp_gN', line 61, column 2 to column 39)",
                                                      " (in 'RR_con_comp_gN', line 65, column 2 to column 27)",
                                                      " (in 'RR_con_comp_gN', line 67, column 2 to column 20)",
                                                      " (in 'RR_con_comp_gN', line 68, column 2 to column 27)",
                                                      " (in 'RR_con_comp_gN', line 70, column 2 to column 30)",
                                                      " (in 'RR_con_comp_gN', line 71, column 2 to column 30)",
                                                      " (in 'RR_con_comp_gN', line 72, column 2 to column 30)",
                                                      " (in 'RR_con_comp_gN', line 75, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 76, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 79, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 80, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 81, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 82, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 84, column 6 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 85, column 6 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 87, column 6 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 88, column 6 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 89, column 6 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 90, column 6 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 91, column 6 to column 41)",
                                                      " (in 'RR_con_comp_gN', line 92, column 6 to column 41)",
                                                      " (in 'RR_con_comp_gN', line 95, column 8 to column 24)",
                                                      " (in 'RR_con_comp_gN', line 96, column 8 to column 20)",
                                                      " (in 'RR_con_comp_gN', line 97, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 98, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 99, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 100, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 101, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 102, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 103, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 104, column 8 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 94, column 43 to line 105, column 7)",
                                                      " (in 'RR_con_comp_gN', line 94, column 21 to line 105, column 7)",
                                                      " (in 'RR_con_comp_gN', line 94, column 19 to line 105, column 8)",
                                                      " (in 'RR_con_comp_gN', line 94, column 6 to line 105, column 8)",
                                                      " (in 'RR_con_comp_gN', line 83, column 21 to line 106, column 5)",
                                                      " (in 'RR_con_comp_gN', line 83, column 4 to line 106, column 5)",
                                                      " (in 'RR_con_comp_gN', line 78, column 2 to line 108, column 3)",
                                                      " (in 'RR_con_comp_gN', line 110, column 2 to column 59)",
                                                      " (in 'RR_con_comp_gN', line 111, column 2 to column 20)",
                                                      " (in 'RR_con_comp_gN', line 112, column 2 to column 20)",
                                                      " (in 'RR_con_comp_gN', line 115, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 116, column 4 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 118, column 6 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 119, column 6 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 122, column 8 to column 88)",
                                                      " (in 'RR_con_comp_gN', line 123, column 8 to column 88)",
                                                      " (in 'RR_con_comp_gN', line 127, column 0 to column 27)",
                                                      " (in 'RR_con_comp_gN', line 128, column 0 to column 27)",
                                                      " (in 'RR_con_comp_gN', line 132, column 4 to column 49)",
                                                      " (in 'RR_con_comp_gN', line 133, column 4 to column 49)",
                                                      " (in 'RR_con_comp_gN', line 120, column 22 to line 134, column 7)",
                                                      " (in 'RR_con_comp_gN', line 120, column 6 to line 134, column 7)",
                                                      " (in 'RR_con_comp_gN', line 117, column 21 to line 135, column 5)",
                                                      " (in 'RR_con_comp_gN', line 117, column 4 to line 135, column 5)",
                                                      " (in 'RR_con_comp_gN', line 114, column 2 to line 136, column 3)",
                                                      " (in 'RR_con_comp_gN', line 140, column 2 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 141, column 2 to column 13)",
                                                      " (in 'RR_con_comp_gN', line 184, column 2 to column 25)",
                                                      " (in 'RR_con_comp_gN', line 185, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 186, column 2 to column 30)",
                                                      " (in 'RR_con_comp_gN', line 187, column 2 to column 30)",
                                                      " (in 'RR_con_comp_gN', line 188, column 2 to column 22)",
                                                      " (in 'RR_con_comp_gN', line 189, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 191, column 2 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 194, column 11 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 194, column 4 to column 24)",
                                                      " (in 'RR_con_comp_gN', line 195, column 11 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 195, column 4 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 197, column 6 to column 33)",
                                                      " (in 'RR_con_comp_gN', line 198, column 6 to column 39)",
                                                      " (in 'RR_con_comp_gN', line 199, column 6 to column 35)",
                                                      " (in 'RR_con_comp_gN', line 200, column 6 to column 34)",
                                                      " (in 'RR_con_comp_gN', line 201, column 6 to column 33)",
                                                      " (in 'RR_con_comp_gN', line 202, column 6 to column 38)",
                                                      " (in 'RR_con_comp_gN', line 196, column 21 to line 203, column 5)",
                                                      " (in 'RR_con_comp_gN', line 196, column 4 to line 203, column 5)",
                                                      " (in 'RR_con_comp_gN', line 193, column 2 to line 205, column 3)",
                                                      " (in 'RR_con_comp_gN', line 207, column 2 to column 51)",
                                                      " (in 'RR_con_comp_gN', line 210, column 11 to column 16)",
                                                      " (in 'RR_con_comp_gN', line 210, column 18 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 210, column 4 to column 36)",
                                                      " (in 'RR_con_comp_gN', line 211, column 4 to column 50)",
                                                      " (in 'RR_con_comp_gN', line 212, column 4 to column 59)",
                                                      " (in 'RR_con_comp_gN', line 209, column 2 to line 213, column 3)",
                                                      " (in 'RR_con_comp_gN', line 215, column 2 to column 24)",
                                                      " (in 'RR_con_comp_gN', line 217, column 2 to column 51)",
                                                      " (in 'RR_con_comp_gN', line 220, column 11 to column 16)",
                                                      " (in 'RR_con_comp_gN', line 220, column 18 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 220, column 4 to column 36)",
                                                      " (in 'RR_con_comp_gN', line 221, column 4 to column 50)",
                                                      " (in 'RR_con_comp_gN', line 222, column 4 to column 59)",
                                                      " (in 'RR_con_comp_gN', line 219, column 2 to line 223, column 3)",
                                                      " (in 'RR_con_comp_gN', line 225, column 2 to column 53)",
                                                      " (in 'RR_con_comp_gN', line 148, column 0 to column 46)",
                                                      " (in 'RR_con_comp_gN', line 150, column 71 to column 72)",
                                                      " (in 'RR_con_comp_gN', line 150, column 4 to column 76)",
                                                      " (in 'RR_con_comp_gN', line 152, column 76 to column 77)",
                                                      " (in 'RR_con_comp_gN', line 152, column 4 to column 81)",
                                                      " (in 'RR_con_comp_gN', line 154, column 72 to column 73)",
                                                      " (in 'RR_con_comp_gN', line 154, column 4 to column 77)",
                                                      " (in 'RR_con_comp_gN', line 145, column 19 to line 155, column 3)",
                                                      " (in 'RR_con_comp_gN', line 145, column 2 to line 155, column 3)",
                                                      " (in 'RR_con_comp_gN', line 157, column 2 to column 41)",
                                                      " (in 'RR_con_comp_gN', line 160, column 4 to column 55)",
                                                      " (in 'RR_con_comp_gN', line 163, column 6 to column 66)",
                                                      " (in 'RR_con_comp_gN', line 164, column 6 to column 66)",
                                                      " (in 'RR_con_comp_gN', line 162, column 41 to line 165, column 5)",
                                                      " (in 'RR_con_comp_gN', line 162, column 19 to line 165, column 5)",
                                                      " (in 'RR_con_comp_gN', line 162, column 17 to line 165, column 6)",
                                                      " (in 'RR_con_comp_gN', line 162, column 4 to line 165, column 6)",
                                                      " (in 'RR_con_comp_gN', line 158, column 19 to line 166, column 3)",
                                                      " (in 'RR_con_comp_gN', line 158, column 2 to line 166, column 3)",
                                                      " (in 'RR_con_comp_gN', line 168, column 18 to column 72)",
                                                      " (in 'RR_con_comp_gN', line 168, column 2 to column 72)",
                                                      " (in 'RR_con_comp_gN', line 169, column 18 to column 86)",
                                                      " (in 'RR_con_comp_gN', line 169, column 2 to column 86)",
                                                      " (in 'RR_con_comp_gN', line 173, column 76 to column 77)",
                                                      " (in 'RR_con_comp_gN', line 173, column 4 to column 81)",
                                                      " (in 'RR_con_comp_gN', line 172, column 19 to line 174, column 3)",
                                                      " (in 'RR_con_comp_gN', line 172, column 2 to line 174, column 3)",
                                                      " (in 'RR_con_comp_gN', line 176, column 2 to column 42)",
                                                      " (in 'RR_con_comp_gN', line 180, column 4 to column 67)",
                                                      " (in 'RR_con_comp_gN', line 179, column 18 to line 181, column 3)",
                                                      " (in 'RR_con_comp_gN', line 179, column 2 to line 181, column 3)",
                                                      " (in 'RR_con_comp_gN', line 11, column 2 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 12, column 2 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 14, column 2 to column 19)",
                                                      " (in 'RR_con_comp_gN', line 15, column 2 to column 19)",
                                                      " (in 'RR_con_comp_gN', line 16, column 2 to column 19)",
                                                      " (in 'RR_con_comp_gN', line 17, column 2 to column 19)",
                                                      " (in 'RR_con_comp_gN', line 19, column 2 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 20, column 2 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 21, column 2 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 23, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 23, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 23, column 2 to column 24)",
                                                      " (in 'RR_con_comp_gN', line 25, column 10 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 25, column 2 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 26, column 2 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 27, column 10 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 27, column 2 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 28, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 28, column 2 to column 28)",
                                                      " (in 'RR_con_comp_gN', line 29, column 2 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 31, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 31, column 2 to column 24)",
                                                      " (in 'RR_con_comp_gN', line 32, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 32, column 2 to column 25)",
                                                      " (in 'RR_con_comp_gN', line 34, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 34, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 35, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 35, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 36, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 36, column 2 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 38, column 2 to column 16)",
                                                      " (in 'RR_con_comp_gN', line 40, column 18 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 40, column 23 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 40, column 2 to column 39)",
                                                      " (in 'RR_con_comp_gN', line 41, column 18 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 41, column 23 to column 26)",
                                                      " (in 'RR_con_comp_gN', line 41, column 2 to column 39)",
                                                      " (in 'RR_con_comp_gN', line 46, column 7 to column 10)",
                                                      " (in 'RR_con_comp_gN', line 48, column 18 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 49, column 18 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 51, column 23 to column 28)",
                                                      " (in 'RR_con_comp_gN', line 56, column 26 to column 29)",
                                                      " (in 'RR_con_comp_gN', line 56, column 31 to column 34)",
                                                      " (in 'RR_con_comp_gN', line 58, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 58, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 59, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 59, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 60, column 18 to column 23)",
                                                      " (in 'RR_con_comp_gN', line 61, column 23 to column 28)",
                                                      " (in 'RR_con_comp_gN', line 65, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 65, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 67, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 68, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 68, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 70, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 70, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 71, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 71, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 72, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 72, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 75, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 75, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 76, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 76, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 184, column 9 to column 11)",
                                                      " (in 'RR_con_comp_gN', line 184, column 13 to column 18)",
                                                      " (in 'RR_con_comp_gN', line 185, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 185, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 186, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 186, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 187, column 9 to column 14)",
                                                      " (in 'RR_con_comp_gN', line 187, column 16 to column 21)",
                                                      " (in 'RR_con_comp_gN', line 188, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 188, column 14 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 189, column 9 to column 12)",
                                                      " (in 'RR_con_comp_gN', line 189, column 14 to column 17)",
                                                      " (in 'RR_con_comp_gN', line 191, column 9 to column 12)"};
#include <stan_meta_header.hpp>
class model_RR_con_comp_gN final : public model_base_crtp<model_RR_con_comp_gN> {
private:
  int Nd;
  int Np;
  int Kd2;
  int Kd1;
  int Kp;
  int Kg;
  int allKd;
  int allKp;
  int allKg;
  Eigen::Matrix<double, -1, -1> Yd2;
  std::vector<std::vector<int>> IDp;
  int Ng;
  std::vector<int> IDg;
  Eigen::Matrix<double, -1, -1> rr_group_t;
  double group_lkj;
  Eigen::Matrix<double, -1, 1> rr_Mvec_m;
  Eigen::Matrix<double, -1, 1> rr_Mvec_sd;
  Eigen::Matrix<double, -1, -1> rr_rel_t;
  Eigen::Matrix<double, -1, -1> rr_out_t;
  Eigen::Matrix<double, -1, -1> rr_in_t;
  double case_lkj;
  Eigen::Matrix<double, -1, -1> rrD_beta_a;
  Eigen::Matrix<double, -1, -1> rrD_beta_b;
  int AP_2dim__;
 
public:
  ~model_RR_con_comp_gN() { }
  
  inline std::string model_name() const final { return "model_RR_con_comp_gN"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_RR_con_comp_gN(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_RR_con_comp_gN_namespace::model_RR_con_comp_gN";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 134;
      context__.validate_dims("data initialization","Nd","int",
          context__.to_vec());
      Nd = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      Nd = context__.vals_i("Nd")[(1 - 1)];
      current_statement__ = 134;
      current_statement__ = 134;
      check_greater_or_equal(function__, "Nd", Nd, 0);
      current_statement__ = 135;
      context__.validate_dims("data initialization","Np","int",
          context__.to_vec());
      Np = std::numeric_limits<int>::min();
      
      current_statement__ = 135;
      Np = context__.vals_i("Np")[(1 - 1)];
      current_statement__ = 135;
      current_statement__ = 135;
      check_greater_or_equal(function__, "Np", Np, 0);
      current_statement__ = 136;
      context__.validate_dims("data initialization","Kd2","int",
          context__.to_vec());
      Kd2 = std::numeric_limits<int>::min();
      
      current_statement__ = 136;
      Kd2 = context__.vals_i("Kd2")[(1 - 1)];
      current_statement__ = 136;
      current_statement__ = 136;
      check_greater_or_equal(function__, "Kd2", Kd2, 0);
      current_statement__ = 137;
      context__.validate_dims("data initialization","Kd1","int",
          context__.to_vec());
      Kd1 = std::numeric_limits<int>::min();
      
      current_statement__ = 137;
      Kd1 = context__.vals_i("Kd1")[(1 - 1)];
      current_statement__ = 137;
      current_statement__ = 137;
      check_greater_or_equal(function__, "Kd1", Kd1, 0);
      current_statement__ = 138;
      context__.validate_dims("data initialization","Kp","int",
          context__.to_vec());
      Kp = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      Kp = context__.vals_i("Kp")[(1 - 1)];
      current_statement__ = 138;
      current_statement__ = 138;
      check_greater_or_equal(function__, "Kp", Kp, 0);
      current_statement__ = 139;
      context__.validate_dims("data initialization","Kg","int",
          context__.to_vec());
      Kg = std::numeric_limits<int>::min();
      
      current_statement__ = 139;
      Kg = context__.vals_i("Kg")[(1 - 1)];
      current_statement__ = 139;
      current_statement__ = 139;
      check_greater_or_equal(function__, "Kg", Kg, 0);
      current_statement__ = 140;
      context__.validate_dims("data initialization","allKd","int",
          context__.to_vec());
      allKd = std::numeric_limits<int>::min();
      
      current_statement__ = 140;
      allKd = context__.vals_i("allKd")[(1 - 1)];
      current_statement__ = 140;
      current_statement__ = 140;
      check_greater_or_equal(function__, "allKd", allKd, 0);
      current_statement__ = 141;
      context__.validate_dims("data initialization","allKp","int",
          context__.to_vec());
      allKp = std::numeric_limits<int>::min();
      
      current_statement__ = 141;
      allKp = context__.vals_i("allKp")[(1 - 1)];
      current_statement__ = 141;
      current_statement__ = 141;
      check_greater_or_equal(function__, "allKp", allKp, 0);
      current_statement__ = 142;
      context__.validate_dims("data initialization","allKg","int",
          context__.to_vec());
      allKg = std::numeric_limits<int>::min();
      
      current_statement__ = 142;
      allKg = context__.vals_i("allKg")[(1 - 1)];
      current_statement__ = 142;
      current_statement__ = 142;
      check_greater_or_equal(function__, "allKg", allKg, 0);
      current_statement__ = 143;
      validate_non_negative_index("Yd2", "Nd", Nd);
      current_statement__ = 144;
      validate_non_negative_index("Yd2", "2 * Kd2", (2 * Kd2));
      current_statement__ = 145;
      context__.validate_dims("data initialization","Yd2","double",
          context__.to_vec(Nd, (2 * Kd2)));
      Yd2 = Eigen::Matrix<double, -1, -1>(Nd, (2 * Kd2));
      stan::math::fill(Yd2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Yd2_flat__;
        current_statement__ = 145;
        assign(Yd2_flat__, nil_index_list(), context__.vals_r("Yd2"),
          "assigning variable Yd2_flat__");
        current_statement__ = 145;
        pos__ = 1;
        current_statement__ = 145;
        for (int sym1__ = 1; sym1__ <= (2 * Kd2); ++sym1__) {
          current_statement__ = 145;
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            current_statement__ = 145;
            assign(Yd2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Yd2_flat__[(pos__ - 1)], "assigning variable Yd2");
            current_statement__ = 145;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 146;
      validate_non_negative_index("IDp", "Nd", Nd);
      current_statement__ = 147;
      context__.validate_dims("data initialization","IDp","int",
          context__.to_vec(Nd, 2));
      IDp = std::vector<std::vector<int>>(Nd, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> IDp_flat__;
        current_statement__ = 147;
        assign(IDp_flat__, nil_index_list(), context__.vals_i("IDp"),
          "assigning variable IDp_flat__");
        current_statement__ = 147;
        pos__ = 1;
        current_statement__ = 147;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 147;
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            current_statement__ = 147;
            assign(IDp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              IDp_flat__[(pos__ - 1)], "assigning variable IDp");
            current_statement__ = 147;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 148;
      context__.validate_dims("data initialization","Ng","int",
          context__.to_vec());
      Ng = std::numeric_limits<int>::min();
      
      current_statement__ = 148;
      Ng = context__.vals_i("Ng")[(1 - 1)];
      current_statement__ = 148;
      current_statement__ = 148;
      check_greater_or_equal(function__, "Ng", Ng, 0);
      current_statement__ = 149;
      validate_non_negative_index("IDg", "Nd", Nd);
      current_statement__ = 150;
      context__.validate_dims("data initialization","IDg","int",
          context__.to_vec(Nd));
      IDg = std::vector<int>(Nd, std::numeric_limits<int>::min());
      
      current_statement__ = 150;
      assign(IDg, nil_index_list(), context__.vals_i("IDg"),
        "assigning variable IDg");
      current_statement__ = 151;
      validate_non_negative_index("rr_group_t", "Kd2", Kd2);
      current_statement__ = 152;
      context__.validate_dims("data initialization","rr_group_t","double",
          context__.to_vec(Kd2, 3));
      rr_group_t = Eigen::Matrix<double, -1, -1>(Kd2, 3);
      stan::math::fill(rr_group_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_group_t_flat__;
        current_statement__ = 152;
        assign(rr_group_t_flat__, nil_index_list(),
          context__.vals_r("rr_group_t"),
          "assigning variable rr_group_t_flat__");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 152;
            assign(rr_group_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rr_group_t_flat__[(pos__ - 1)], "assigning variable rr_group_t");
            current_statement__ = 152;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 153;
      context__.validate_dims("data initialization","group_lkj","double",
          context__.to_vec());
      group_lkj = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 153;
      group_lkj = context__.vals_r("group_lkj")[(1 - 1)];
      current_statement__ = 154;
      validate_non_negative_index("rr_Mvec_m", "Kd2", Kd2);
      current_statement__ = 155;
      context__.validate_dims("data initialization","rr_Mvec_m","double",
          context__.to_vec(Kd2));
      rr_Mvec_m = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(rr_Mvec_m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_Mvec_m_flat__;
        current_statement__ = 155;
        assign(rr_Mvec_m_flat__, nil_index_list(),
          context__.vals_r("rr_Mvec_m"),
          "assigning variable rr_Mvec_m_flat__");
        current_statement__ = 155;
        pos__ = 1;
        current_statement__ = 155;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 155;
          assign(rr_Mvec_m, cons_list(index_uni(sym1__), nil_index_list()),
            rr_Mvec_m_flat__[(pos__ - 1)], "assigning variable rr_Mvec_m");
          current_statement__ = 155;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 156;
      validate_non_negative_index("rr_Mvec_sd", "Kd2", Kd2);
      current_statement__ = 157;
      context__.validate_dims("data initialization","rr_Mvec_sd","double",
          context__.to_vec(Kd2));
      rr_Mvec_sd = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(rr_Mvec_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_Mvec_sd_flat__;
        current_statement__ = 157;
        assign(rr_Mvec_sd_flat__, nil_index_list(),
          context__.vals_r("rr_Mvec_sd"),
          "assigning variable rr_Mvec_sd_flat__");
        current_statement__ = 157;
        pos__ = 1;
        current_statement__ = 157;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 157;
          assign(rr_Mvec_sd, cons_list(index_uni(sym1__), nil_index_list()),
            rr_Mvec_sd_flat__[(pos__ - 1)], "assigning variable rr_Mvec_sd");
          current_statement__ = 157;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 158;
      validate_non_negative_index("rr_rel_t", "Kd2", Kd2);
      current_statement__ = 159;
      context__.validate_dims("data initialization","rr_rel_t","double",
          context__.to_vec(Kd2, 3));
      rr_rel_t = Eigen::Matrix<double, -1, -1>(Kd2, 3);
      stan::math::fill(rr_rel_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_rel_t_flat__;
        current_statement__ = 159;
        assign(rr_rel_t_flat__, nil_index_list(),
          context__.vals_r("rr_rel_t"), "assigning variable rr_rel_t_flat__");
        current_statement__ = 159;
        pos__ = 1;
        current_statement__ = 159;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 159;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 159;
            assign(rr_rel_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rr_rel_t_flat__[(pos__ - 1)], "assigning variable rr_rel_t");
            current_statement__ = 159;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 160;
      validate_non_negative_index("rr_out_t", "Kd2", Kd2);
      current_statement__ = 161;
      context__.validate_dims("data initialization","rr_out_t","double",
          context__.to_vec(Kd2, 3));
      rr_out_t = Eigen::Matrix<double, -1, -1>(Kd2, 3);
      stan::math::fill(rr_out_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_out_t_flat__;
        current_statement__ = 161;
        assign(rr_out_t_flat__, nil_index_list(),
          context__.vals_r("rr_out_t"), "assigning variable rr_out_t_flat__");
        current_statement__ = 161;
        pos__ = 1;
        current_statement__ = 161;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 161;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 161;
            assign(rr_out_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rr_out_t_flat__[(pos__ - 1)], "assigning variable rr_out_t");
            current_statement__ = 161;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 162;
      validate_non_negative_index("rr_in_t", "Kd2", Kd2);
      current_statement__ = 163;
      context__.validate_dims("data initialization","rr_in_t","double",
          context__.to_vec(Kd2, 3));
      rr_in_t = Eigen::Matrix<double, -1, -1>(Kd2, 3);
      stan::math::fill(rr_in_t, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rr_in_t_flat__;
        current_statement__ = 163;
        assign(rr_in_t_flat__, nil_index_list(), context__.vals_r("rr_in_t"),
          "assigning variable rr_in_t_flat__");
        current_statement__ = 163;
        pos__ = 1;
        current_statement__ = 163;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 163;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 163;
            assign(rr_in_t,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rr_in_t_flat__[(pos__ - 1)], "assigning variable rr_in_t");
            current_statement__ = 163;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 164;
      context__.validate_dims("data initialization","case_lkj","double",
          context__.to_vec());
      case_lkj = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 164;
      case_lkj = context__.vals_r("case_lkj")[(1 - 1)];
      current_statement__ = 165;
      validate_non_negative_index("rrD_beta_a", "Kd2", Kd2);
      current_statement__ = 166;
      validate_non_negative_index("rrD_beta_a", "Kd2", Kd2);
      current_statement__ = 167;
      context__.validate_dims("data initialization","rrD_beta_a","double",
          context__.to_vec(Kd2, Kd2));
      rrD_beta_a = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(rrD_beta_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rrD_beta_a_flat__;
        current_statement__ = 167;
        assign(rrD_beta_a_flat__, nil_index_list(),
          context__.vals_r("rrD_beta_a"),
          "assigning variable rrD_beta_a_flat__");
        current_statement__ = 167;
        pos__ = 1;
        current_statement__ = 167;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 167;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 167;
            assign(rrD_beta_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rrD_beta_a_flat__[(pos__ - 1)], "assigning variable rrD_beta_a");
            current_statement__ = 167;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 167;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 167;
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          current_statement__ = 167;
          current_statement__ = 167;
          check_greater_or_equal(function__, "rrD_beta_a[sym1__, sym2__]",
                                 rvalue(rrD_beta_a,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "rrD_beta_a"), 0);
        }}
      current_statement__ = 168;
      validate_non_negative_index("rrD_beta_b", "Kd2", Kd2);
      current_statement__ = 169;
      validate_non_negative_index("rrD_beta_b", "Kd2", Kd2);
      current_statement__ = 170;
      context__.validate_dims("data initialization","rrD_beta_b","double",
          context__.to_vec(Kd2, Kd2));
      rrD_beta_b = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(rrD_beta_b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rrD_beta_b_flat__;
        current_statement__ = 170;
        assign(rrD_beta_b_flat__, nil_index_list(),
          context__.vals_r("rrD_beta_b"),
          "assigning variable rrD_beta_b_flat__");
        current_statement__ = 170;
        pos__ = 1;
        current_statement__ = 170;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 170;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 170;
            assign(rrD_beta_b,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              rrD_beta_b_flat__[(pos__ - 1)], "assigning variable rrD_beta_b");
            current_statement__ = 170;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 170;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 170;
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          current_statement__ = 170;
          current_statement__ = 170;
          check_greater_or_equal(function__, "rrD_beta_b[sym1__, sym2__]",
                                 rvalue(rrD_beta_b,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "rrD_beta_b"), 0);
        }}
      current_statement__ = 171;
      validate_non_negative_index("Mvec", "Kd2", Kd2);
      current_statement__ = 172;
      validate_non_negative_index("s_rr", "Kd2", Kd2);
      current_statement__ = 173;
      validate_non_negative_index("S_p", "allKp", allKp);
      current_statement__ = 174;
      validate_non_negative_index("chol_r_p", "allKp", allKp);
      current_statement__ = 174;
      validate_non_negative_index("chol_r_p", "allKp", allKp);
      current_statement__ = 175;
      validate_non_negative_index("r_d2", "Kd2", Kd2);
      current_statement__ = 176;
      validate_non_negative_index("r_d2", "Kd2", Kd2);
      current_statement__ = 177;
      validate_non_negative_index("AP", "Np", Np);
      current_statement__ = 178;
      AP_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 178;
      AP_2dim__ = (2 * Kd2);
      current_statement__ = 178;
      validate_non_negative_index("AP", "2 * Kd2", AP_2dim__);
      current_statement__ = 179;
      validate_non_negative_index("GG", "Ng", Ng);
      current_statement__ = 180;
      validate_non_negative_index("GG", "allKg", allKg);
      current_statement__ = 181;
      validate_non_negative_index("S_g", "allKg", allKg);
      current_statement__ = 182;
      validate_non_negative_index("chol_r_g", "allKg", allKg);
      current_statement__ = 182;
      validate_non_negative_index("chol_r_g", "allKg", allKg);
      current_statement__ = 183;
      validate_non_negative_index("Yd2hat", "Nd", Nd);
      current_statement__ = 184;
      validate_non_negative_index("Yd2hat", "allKd", allKd);
      current_statement__ = 185;
      validate_non_negative_index("S_d", "allKd", allKd);
      current_statement__ = 186;
      validate_non_negative_index("Rd2", "allKd", allKd);
      current_statement__ = 187;
      validate_non_negative_index("Rd2", "allKd", allKd);
      current_statement__ = 188;
      validate_non_negative_index("chol_d", "allKd", allKd);
      current_statement__ = 189;
      validate_non_negative_index("chol_d", "allKd", allKd);
      current_statement__ = 190;
      validate_non_negative_index("chol_p", "allKp", allKp);
      current_statement__ = 191;
      validate_non_negative_index("chol_p", "allKp", allKp);
      current_statement__ = 192;
      validate_non_negative_index("chol_g", "allKg", allKg);
      current_statement__ = 193;
      validate_non_negative_index("chol_g", "allKg", allKg);
      current_statement__ = 194;
      validate_non_negative_index("augYd", "Nd", Nd);
      current_statement__ = 195;
      validate_non_negative_index("augYd", "allKd", allKd);
      current_statement__ = 196;
      validate_non_negative_index("augYp", "Np", Np);
      current_statement__ = 197;
      validate_non_negative_index("augYp", "allKp", allKp);
      current_statement__ = 198;
      validate_non_negative_index("Yd2e", "Nd", Nd);
      current_statement__ = 199;
      validate_non_negative_index("Yd2e", "allKd", allKd);
      current_statement__ = 200;
      validate_non_negative_index("Rp", "allKp", allKp);
      current_statement__ = 201;
      validate_non_negative_index("Rp", "allKp", allKp);
      current_statement__ = 202;
      validate_non_negative_index("pSigma", "allKp", allKp);
      current_statement__ = 203;
      validate_non_negative_index("pSigma", "allKp", allKp);
      current_statement__ = 204;
      validate_non_negative_index("dSigma", "allKd", allKd);
      current_statement__ = 205;
      validate_non_negative_index("dSigma", "allKd", allKd);
      current_statement__ = 206;
      validate_non_negative_index("Rg", "Kd2", Kd2);
      current_statement__ = 207;
      validate_non_negative_index("Rg", "Kd2", Kd2);
      current_statement__ = 208;
      validate_non_negative_index("gSigma", "Kd2", Kd2);
      current_statement__ = 209;
      validate_non_negative_index("gSigma", "Kd2", Kd2);
      current_statement__ = 210;
      validate_non_negative_index("Rsq", "Kd2", Kd2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += Kd2;
      num_params_r__ += Kd2;
      num_params_r__ += allKp;
      num_params_r__ += ((allKp * (allKp - 1)) / 2);
      num_params_r__ += Kd2 * Kd2;
      num_params_r__ += Np * AP_2dim__;
      num_params_r__ += Ng * allKg;
      num_params_r__ += allKg;
      num_params_r__ += ((allKg * (allKg - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_RR_con_comp_gN_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> Mvec;
      Mvec = Eigen::Matrix<local_scalar_t__, -1, 1>(Kd2);
      stan::math::fill(Mvec, DUMMY_VAR__);
      
      current_statement__ = 1;
      Mvec = in__.vector(Kd2);
      Eigen::Matrix<local_scalar_t__, -1, 1> s_rr;
      s_rr = Eigen::Matrix<local_scalar_t__, -1, 1>(Kd2);
      stan::math::fill(s_rr, DUMMY_VAR__);
      
      current_statement__ = 2;
      s_rr = in__.vector(Kd2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(s_rr, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(s_rr[(sym1__ - 1)], 0, lp__),
            "assigning variable s_rr");
        } else {
          current_statement__ = 2;
          assign(s_rr, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(s_rr[(sym1__ - 1)], 0),
            "assigning variable s_rr");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> S_p;
      S_p = Eigen::Matrix<local_scalar_t__, -1, 1>(allKp);
      stan::math::fill(S_p, DUMMY_VAR__);
      
      current_statement__ = 3;
      S_p = in__.vector(allKp);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(S_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_p[(sym1__ - 1)], 0, lp__),
            "assigning variable S_p");
        } else {
          current_statement__ = 3;
          assign(S_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_p[(sym1__ - 1)], 0),
            "assigning variable S_p");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> chol_r_p;
      chol_r_p = Eigen::Matrix<local_scalar_t__, -1, -1>(allKp, allKp);
      stan::math::fill(chol_r_p, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> chol_r_p_in__;
      chol_r_p_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((allKp *
                                                                (allKp - 1))
                                                               / 2));
      stan::math::fill(chol_r_p_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      chol_r_p_in__ = in__.vector(((allKp * (allKp - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(chol_r_p, nil_index_list(),
          stan::math::cholesky_corr_constrain(chol_r_p_in__, allKp, lp__),
          "assigning variable chol_r_p");
      } else {
        current_statement__ = 4;
        assign(chol_r_p, nil_index_list(),
          stan::math::cholesky_corr_constrain(chol_r_p_in__, allKp),
          "assigning variable chol_r_p");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> r_d2;
      r_d2 = Eigen::Matrix<local_scalar_t__, -1, -1>(Kd2, Kd2);
      stan::math::fill(r_d2, DUMMY_VAR__);
      
      current_statement__ = 5;
      r_d2 = in__.matrix(Kd2, Kd2);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          current_statement__ = 5;
          if (jacobian__) {
            current_statement__ = 5;
            assign(r_d2,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                rvalue(r_d2,
                  cons_list(index_uni(sym1__),
                    cons_list(index_uni(sym2__), nil_index_list())), "r_d2"),
                0, 1, lp__), "assigning variable r_d2");
          } else {
            current_statement__ = 5;
            assign(r_d2,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              stan::math::lub_constrain(
                rvalue(r_d2,
                  cons_list(index_uni(sym1__),
                    cons_list(index_uni(sym2__), nil_index_list())), "r_d2"),
                0, 1), "assigning variable r_d2");
          }}}
      Eigen::Matrix<local_scalar_t__, -1, -1> AP;
      AP = Eigen::Matrix<local_scalar_t__, -1, -1>(Np, AP_2dim__);
      stan::math::fill(AP, DUMMY_VAR__);
      
      current_statement__ = 6;
      AP = in__.matrix(Np, AP_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> GG;
      GG = Eigen::Matrix<local_scalar_t__, -1, -1>(Ng, allKg);
      stan::math::fill(GG, DUMMY_VAR__);
      
      current_statement__ = 7;
      GG = in__.matrix(Ng, allKg);
      Eigen::Matrix<local_scalar_t__, -1, 1> S_g;
      S_g = Eigen::Matrix<local_scalar_t__, -1, 1>(allKg);
      stan::math::fill(S_g, DUMMY_VAR__);
      
      current_statement__ = 8;
      S_g = in__.vector(allKg);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(S_g, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_g[(sym1__ - 1)], 0, lp__),
            "assigning variable S_g");
        } else {
          current_statement__ = 8;
          assign(S_g, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_g[(sym1__ - 1)], 0),
            "assigning variable S_g");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> chol_r_g;
      chol_r_g = Eigen::Matrix<local_scalar_t__, -1, -1>(allKg, allKg);
      stan::math::fill(chol_r_g, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> chol_r_g_in__;
      chol_r_g_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((allKg *
                                                                (allKg - 1))
                                                               / 2));
      stan::math::fill(chol_r_g_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      chol_r_g_in__ = in__.vector(((allKg * (allKg - 1)) / 2));
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        assign(chol_r_g, nil_index_list(),
          stan::math::cholesky_corr_constrain(chol_r_g_in__, allKg, lp__),
          "assigning variable chol_r_g");
      } else {
        current_statement__ = 9;
        assign(chol_r_g, nil_index_list(),
          stan::math::cholesky_corr_constrain(chol_r_g_in__, allKg),
          "assigning variable chol_r_g");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> Yd2hat;
      Yd2hat = Eigen::Matrix<local_scalar_t__, -1, -1>(Nd, allKd);
      stan::math::fill(Yd2hat, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> S_d;
      S_d = Eigen::Matrix<local_scalar_t__, -1, 1>(allKd);
      stan::math::fill(S_d, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Rd2;
      Rd2 = Eigen::Matrix<local_scalar_t__, -1, -1>(allKd, allKd);
      stan::math::fill(Rd2, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chol_d;
      chol_d = Eigen::Matrix<local_scalar_t__, -1, -1>(allKd, allKd);
      stan::math::fill(chol_d, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chol_p;
      chol_p = Eigen::Matrix<local_scalar_t__, -1, -1>(allKp, allKp);
      stan::math::fill(chol_p, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chol_g;
      chol_g = Eigen::Matrix<local_scalar_t__, -1, -1>(allKg, allKg);
      stan::math::fill(chol_g, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> augYd;
      augYd = Eigen::Matrix<local_scalar_t__, -1, -1>(Nd, allKd);
      stan::math::fill(augYd, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> augYp;
      augYp = Eigen::Matrix<local_scalar_t__, -1, -1>(Np, allKp);
      stan::math::fill(augYp, DUMMY_VAR__);
      
      {
        int idx1;
        idx1 = std::numeric_limits<int>::min();
        
        int idx2;
        idx2 = std::numeric_limits<int>::min();
        
        int idp1;
        idp1 = std::numeric_limits<int>::min();
        
        int idp2;
        idp2 = std::numeric_limits<int>::min();
        
        current_statement__ = 45;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 22;
          idx1 = ((k * 2) - 1);
          current_statement__ = 23;
          idx2 = (k * 2);
          current_statement__ = 24;
          assign(S_d, cons_list(index_uni(idx1), nil_index_list()),
            s_rr[(k - 1)], "assigning variable S_d");
          current_statement__ = 25;
          assign(S_d, cons_list(index_uni(idx2), nil_index_list()),
            s_rr[(k - 1)], "assigning variable S_d");
          current_statement__ = 26;
          assign(Rd2,
            cons_list(index_uni(idx1),
              cons_list(index_uni(idx1), nil_index_list())), 1,
            "assigning variable Rd2");
          current_statement__ = 27;
          assign(Rd2,
            cons_list(index_uni(idx2),
              cons_list(index_uni(idx2), nil_index_list())), 1,
            "assigning variable Rd2");
          current_statement__ = 28;
          assign(Rd2,
            cons_list(index_uni(idx1),
              cons_list(index_uni(idx2), nil_index_list())),
            (-1 +
              (2 *
                rvalue(r_d2,
                  cons_list(index_uni(k),
                    cons_list(index_uni(k), nil_index_list())), "r_d2"))),
            "assigning variable Rd2");
          current_statement__ = 29;
          assign(Rd2,
            cons_list(index_uni(idx2),
              cons_list(index_uni(idx1), nil_index_list())),
            (-1 +
              (2 *
                rvalue(r_d2,
                  cons_list(index_uni(k),
                    cons_list(index_uni(k), nil_index_list())), "r_d2"))),
            "assigning variable Rd2");
          current_statement__ = 43;
          if (logical_lt(k, Kd2)) {
            current_statement__ = 41;
            for (int kk = (k + 1); kk <= Kd2; ++kk) {
              current_statement__ = 30;
              idp1 = ((kk * 2) - 1);
              current_statement__ = 31;
              idp2 = (kk * 2);
              current_statement__ = 32;
              assign(Rd2,
                cons_list(index_uni(idx1),
                  cons_list(index_uni(idp1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 33;
              assign(Rd2,
                cons_list(index_uni(idx2),
                  cons_list(index_uni(idp2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 34;
              assign(Rd2,
                cons_list(index_uni(idp1),
                  cons_list(index_uni(idx1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 35;
              assign(Rd2,
                cons_list(index_uni(idp2),
                  cons_list(index_uni(idx2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 36;
              assign(Rd2,
                cons_list(index_uni(idx1),
                  cons_list(index_uni(idp2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 37;
              assign(Rd2,
                cons_list(index_uni(idp2),
                  cons_list(index_uni(idx1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 38;
              assign(Rd2,
                cons_list(index_uni(idx2),
                  cons_list(index_uni(idp1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 39;
              assign(Rd2,
                cons_list(index_uni(idp1),
                  cons_list(index_uni(idx2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");}
          } }
      }
      current_statement__ = 47;
      assign(chol_d, nil_index_list(),
        diag_pre_multiply(S_d, cholesky_decompose(Rd2)),
        "assigning variable chol_d");
      current_statement__ = 48;
      assign(chol_p, nil_index_list(), chol_r_p, "assigning variable chol_p");
      current_statement__ = 49;
      assign(chol_g, nil_index_list(), chol_r_g, "assigning variable chol_g");
      {
        int idx1;
        idx1 = std::numeric_limits<int>::min();
        
        int idx2;
        idx2 = std::numeric_limits<int>::min();
        
        current_statement__ = 63;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 52;
          idx1 = ((k * 2) - 1);
          current_statement__ = 53;
          idx2 = (k * 2);
          current_statement__ = 61;
          for (int d = 1; d <= Nd; ++d) {
            current_statement__ = 54;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              ((S_p[(idx1 - 1)] *
                 rvalue(AP,
                   cons_list(index_uni(IDp[(d - 1)][(1 - 1)]),
                     cons_list(index_uni(idx1), nil_index_list())), "AP")) +
                (S_p[(idx2 - 1)] *
                  rvalue(AP,
                    cons_list(index_uni(IDp[(d - 1)][(2 - 1)]),
                      cons_list(index_uni(idx2), nil_index_list())), "AP"))),
              "assigning variable Yd2hat");
            current_statement__ = 55;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              ((S_p[(idx1 - 1)] *
                 rvalue(AP,
                   cons_list(index_uni(IDp[(d - 1)][(2 - 1)]),
                     cons_list(index_uni(idx1), nil_index_list())), "AP")) +
                (S_p[(idx2 - 1)] *
                  rvalue(AP,
                    cons_list(index_uni(IDp[(d - 1)][(1 - 1)]),
                      cons_list(index_uni(idx2), nil_index_list())), "AP"))),
              "assigning variable Yd2hat");
            current_statement__ = 56;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx1), nil_index_list())), "Yd2hat") +
                Mvec[(k - 1)]), "assigning variable Yd2hat");
            current_statement__ = 57;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx2), nil_index_list())), "Yd2hat") +
                Mvec[(k - 1)]), "assigning variable Yd2hat");
            current_statement__ = 58;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx1), nil_index_list())), "Yd2hat") +
                (S_g[(k - 1)] *
                  rvalue(GG,
                    cons_list(index_uni(IDg[(d - 1)]),
                      cons_list(index_uni(k), nil_index_list())), "GG"))),
              "assigning variable Yd2hat");
            current_statement__ = 59;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx2), nil_index_list())), "Yd2hat") +
                (S_g[(k - 1)] *
                  rvalue(GG,
                    cons_list(index_uni(IDg[(d - 1)]),
                      cons_list(index_uni(k), nil_index_list())), "GG"))),
              "assigning variable Yd2hat");}}
      }
      current_statement__ = 65;
      assign(augYd, nil_index_list(), Yd2, "assigning variable augYd");
      current_statement__ = 66;
      assign(augYp, nil_index_list(), AP, "assigning variable augYp");
      {
        current_statement__ = 111;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 103;
          lp_accum__.add(
            normal_lpdf<propto__>(Mvec[(k - 1)], rr_Mvec_m[(k - 1)],
              rr_Mvec_sd[(k - 1)]));
          current_statement__ = 104;
          if (logical_lt(s_rr[(k - 1)], 0)) {
            current_statement__ = 104;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 104;
            lp_accum__.add(
              -student_t_ccdf_log(0,
                 rvalue(rr_rel_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(1), nil_index_list())), "rr_rel_t"),
                 rvalue(rr_rel_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(2), nil_index_list())), "rr_rel_t"),
                 rvalue(rr_rel_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(3), nil_index_list())), "rr_rel_t")));
          }
          current_statement__ = 105;
          lp_accum__.add(
            student_t_lpdf<propto__>(s_rr[(k - 1)],
              rvalue(rr_rel_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(1), nil_index_list())), "rr_rel_t"),
              rvalue(rr_rel_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(2), nil_index_list())), "rr_rel_t"),
              rvalue(rr_rel_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(3), nil_index_list())), "rr_rel_t")));
          current_statement__ = 106;
          if (logical_lt(S_p[(((2 * k) - 1) - 1)], 0)) {
            current_statement__ = 106;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 106;
            lp_accum__.add(
              -student_t_ccdf_log(0,
                 rvalue(rr_out_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(1), nil_index_list())), "rr_out_t"),
                 rvalue(rr_out_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(2), nil_index_list())), "rr_out_t"),
                 rvalue(rr_out_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(3), nil_index_list())), "rr_out_t")));
          }
          current_statement__ = 107;
          lp_accum__.add(
            student_t_lpdf<propto__>(S_p[(((2 * k) - 1) - 1)],
              rvalue(rr_out_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(1), nil_index_list())), "rr_out_t"),
              rvalue(rr_out_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(2), nil_index_list())), "rr_out_t"),
              rvalue(rr_out_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(3), nil_index_list())), "rr_out_t")));
          current_statement__ = 108;
          if (logical_lt(S_p[((2 * k) - 1)], 0)) {
            current_statement__ = 108;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 108;
            lp_accum__.add(
              -student_t_ccdf_log(0,
                 rvalue(rr_in_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(1), nil_index_list())), "rr_in_t"),
                 rvalue(rr_in_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(2), nil_index_list())), "rr_in_t"),
                 rvalue(rr_in_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(3), nil_index_list())), "rr_in_t")));
          }
          current_statement__ = 109;
          lp_accum__.add(
            student_t_lpdf<propto__>(S_p[((2 * k) - 1)],
              rvalue(rr_in_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(1), nil_index_list())), "rr_in_t"),
              rvalue(rr_in_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(2), nil_index_list())), "rr_in_t"),
              rvalue(rr_in_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(3), nil_index_list())), "rr_in_t")));}
        current_statement__ = 112;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(chol_r_p, case_lkj));
        current_statement__ = 121;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 113;
          lp_accum__.add(
            beta_lpdf<propto__>(
              rvalue(r_d2,
                cons_list(index_uni(k),
                  cons_list(index_uni(k), nil_index_list())), "r_d2"),
              rvalue(rrD_beta_a,
                cons_list(index_uni(k),
                  cons_list(index_uni(k), nil_index_list())), "rrD_beta_a"),
              rvalue(rrD_beta_b,
                cons_list(index_uni(k),
                  cons_list(index_uni(k), nil_index_list())), "rrD_beta_b")));
          current_statement__ = 119;
          if (logical_lt(k, Kd2)) {
            current_statement__ = 117;
            for (int kk = (k + 1); kk <= Kd2; ++kk) {
              current_statement__ = 114;
              lp_accum__.add(
                beta_lpdf<propto__>(
                  rvalue(r_d2,
                    cons_list(index_uni(kk),
                      cons_list(index_uni(k), nil_index_list())), "r_d2"),
                  rvalue(rrD_beta_a,
                    cons_list(index_uni(kk),
                      cons_list(index_uni(k), nil_index_list())),
                    "rrD_beta_a"),
                  rvalue(rrD_beta_b,
                    cons_list(index_uni(kk),
                      cons_list(index_uni(k), nil_index_list())),
                    "rrD_beta_b")));
              current_statement__ = 115;
              lp_accum__.add(
                beta_lpdf<propto__>(
                  rvalue(r_d2,
                    cons_list(index_uni(k),
                      cons_list(index_uni(kk), nil_index_list())), "r_d2"),
                  rvalue(rrD_beta_a,
                    cons_list(index_uni(k),
                      cons_list(index_uni(kk), nil_index_list())),
                    "rrD_beta_a"),
                  rvalue(rrD_beta_b,
                    cons_list(index_uni(k),
                      cons_list(index_uni(kk), nil_index_list())),
                    "rrD_beta_b")));}
          } }
        current_statement__ = 123;
        for (int n = 1; n <= Nd; ++n) {
          current_statement__ = 122;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(augYd,
                cons_list(index_uni(n),
                  cons_list(index_omni(), nil_index_list())), "augYd"),
              rvalue(Yd2hat,
                cons_list(index_uni(n),
                  cons_list(index_omni(), nil_index_list())), "Yd2hat"),
              chol_d));}
        current_statement__ = 125;
        for (int n = 1; n <= Np; ++n) {
          current_statement__ = 124;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(augYp,
                cons_list(index_uni(n),
                  cons_list(index_omni(), nil_index_list())), "augYp"),
              rep_row_vector(0, allKp), chol_p));}
        current_statement__ = 129;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 126;
          if (logical_lt(S_g[(k - 1)], 0)) {
            current_statement__ = 126;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 126;
            lp_accum__.add(
              -student_t_ccdf_log(0,
                 rvalue(rr_group_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(1), nil_index_list())),
                   "rr_group_t"),
                 rvalue(rr_group_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(2), nil_index_list())),
                   "rr_group_t"),
                 rvalue(rr_group_t,
                   cons_list(index_uni(k),
                     cons_list(index_uni(3), nil_index_list())),
                   "rr_group_t")));
          }
          current_statement__ = 127;
          lp_accum__.add(
            student_t_lpdf<propto__>(S_g[(k - 1)],
              rvalue(rr_group_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(1), nil_index_list())), "rr_group_t"),
              rvalue(rr_group_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(2), nil_index_list())), "rr_group_t"),
              rvalue(rr_group_t,
                cons_list(index_uni(k),
                  cons_list(index_uni(3), nil_index_list())), "rr_group_t")));
        }
        current_statement__ = 130;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(chol_r_g, group_lkj));
        current_statement__ = 133;
        for (int n = 1; n <= Ng; ++n) {
          current_statement__ = 131;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(GG,
                cons_list(index_uni(n),
                  cons_list(index_omni(), nil_index_list())), "GG"),
              rep_row_vector(0, Kd2), chol_g));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_RR_con_comp_gN_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> Mvec;
      Mvec = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(Mvec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      Mvec = in__.vector(Kd2);
      Eigen::Matrix<double, -1, 1> s_rr;
      s_rr = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(s_rr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      s_rr = in__.vector(Kd2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 2;
        assign(s_rr, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(s_rr[(sym1__ - 1)], 0),
          "assigning variable s_rr");}
      Eigen::Matrix<double, -1, 1> S_p;
      S_p = Eigen::Matrix<double, -1, 1>(allKp);
      stan::math::fill(S_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      S_p = in__.vector(allKp);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        current_statement__ = 3;
        assign(S_p, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(S_p[(sym1__ - 1)], 0),
          "assigning variable S_p");}
      Eigen::Matrix<double, -1, -1> chol_r_p;
      chol_r_p = Eigen::Matrix<double, -1, -1>(allKp, allKp);
      stan::math::fill(chol_r_p, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> chol_r_p_in__;
      chol_r_p_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((allKp *
                                                                (allKp - 1))
                                                               / 2));
      stan::math::fill(chol_r_p_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      chol_r_p_in__ = in__.vector(((allKp * (allKp - 1)) / 2));
      current_statement__ = 4;
      assign(chol_r_p, nil_index_list(),
        stan::math::cholesky_corr_constrain(chol_r_p_in__, allKp),
        "assigning variable chol_r_p");
      Eigen::Matrix<double, -1, -1> r_d2;
      r_d2 = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(r_d2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      r_d2 = in__.matrix(Kd2, Kd2);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          current_statement__ = 5;
          assign(r_d2,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_constrain(
              rvalue(r_d2,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__), nil_index_list())), "r_d2"),
              0, 1), "assigning variable r_d2");}}
      Eigen::Matrix<double, -1, -1> AP;
      AP = Eigen::Matrix<double, -1, -1>(Np, AP_2dim__);
      stan::math::fill(AP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      AP = in__.matrix(Np, AP_2dim__);
      Eigen::Matrix<double, -1, -1> GG;
      GG = Eigen::Matrix<double, -1, -1>(Ng, allKg);
      stan::math::fill(GG, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      GG = in__.matrix(Ng, allKg);
      Eigen::Matrix<double, -1, 1> S_g;
      S_g = Eigen::Matrix<double, -1, 1>(allKg);
      stan::math::fill(S_g, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      S_g = in__.vector(allKg);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        current_statement__ = 8;
        assign(S_g, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(S_g[(sym1__ - 1)], 0),
          "assigning variable S_g");}
      Eigen::Matrix<double, -1, -1> chol_r_g;
      chol_r_g = Eigen::Matrix<double, -1, -1>(allKg, allKg);
      stan::math::fill(chol_r_g, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> chol_r_g_in__;
      chol_r_g_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((allKg *
                                                                (allKg - 1))
                                                               / 2));
      stan::math::fill(chol_r_g_in__, DUMMY_VAR__);
      
      current_statement__ = 9;
      chol_r_g_in__ = in__.vector(((allKg * (allKg - 1)) / 2));
      current_statement__ = 9;
      assign(chol_r_g, nil_index_list(),
        stan::math::cholesky_corr_constrain(chol_r_g_in__, allKg),
        "assigning variable chol_r_g");
      Eigen::Matrix<double, -1, -1> Yd2hat;
      Yd2hat = Eigen::Matrix<double, -1, -1>(Nd, allKd);
      stan::math::fill(Yd2hat, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> S_d;
      S_d = Eigen::Matrix<double, -1, 1>(allKd);
      stan::math::fill(S_d, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Rd2;
      Rd2 = Eigen::Matrix<double, -1, -1>(allKd, allKd);
      stan::math::fill(Rd2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> chol_d;
      chol_d = Eigen::Matrix<double, -1, -1>(allKd, allKd);
      stan::math::fill(chol_d, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> chol_p;
      chol_p = Eigen::Matrix<double, -1, -1>(allKp, allKp);
      stan::math::fill(chol_p, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> chol_g;
      chol_g = Eigen::Matrix<double, -1, -1>(allKg, allKg);
      stan::math::fill(chol_g, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> augYd;
      augYd = Eigen::Matrix<double, -1, -1>(Nd, allKd);
      stan::math::fill(augYd, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> augYp;
      augYp = Eigen::Matrix<double, -1, -1>(Np, allKp);
      stan::math::fill(augYp, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        vars__.emplace_back(Mvec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        vars__.emplace_back(s_rr[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        vars__.emplace_back(S_p[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
          vars__.emplace_back(
            rvalue(chol_r_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "chol_r_p"));
        }}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          vars__.emplace_back(
            rvalue(r_d2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "r_d2"));}}
      for (int sym1__ = 1; sym1__ <= AP_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
          vars__.emplace_back(
            rvalue(AP,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "AP"));}}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
          vars__.emplace_back(
            rvalue(GG,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "GG"));}}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        vars__.emplace_back(S_g[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
          vars__.emplace_back(
            rvalue(chol_r_g,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "chol_r_g"));
        }}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        int idx1;
        idx1 = std::numeric_limits<int>::min();
        
        int idx2;
        idx2 = std::numeric_limits<int>::min();
        
        int idp1;
        idp1 = std::numeric_limits<int>::min();
        
        int idp2;
        idp2 = std::numeric_limits<int>::min();
        
        current_statement__ = 45;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 22;
          idx1 = ((k * 2) - 1);
          current_statement__ = 23;
          idx2 = (k * 2);
          current_statement__ = 24;
          assign(S_d, cons_list(index_uni(idx1), nil_index_list()),
            s_rr[(k - 1)], "assigning variable S_d");
          current_statement__ = 25;
          assign(S_d, cons_list(index_uni(idx2), nil_index_list()),
            s_rr[(k - 1)], "assigning variable S_d");
          current_statement__ = 26;
          assign(Rd2,
            cons_list(index_uni(idx1),
              cons_list(index_uni(idx1), nil_index_list())), 1,
            "assigning variable Rd2");
          current_statement__ = 27;
          assign(Rd2,
            cons_list(index_uni(idx2),
              cons_list(index_uni(idx2), nil_index_list())), 1,
            "assigning variable Rd2");
          current_statement__ = 28;
          assign(Rd2,
            cons_list(index_uni(idx1),
              cons_list(index_uni(idx2), nil_index_list())),
            (-1 +
              (2 *
                rvalue(r_d2,
                  cons_list(index_uni(k),
                    cons_list(index_uni(k), nil_index_list())), "r_d2"))),
            "assigning variable Rd2");
          current_statement__ = 29;
          assign(Rd2,
            cons_list(index_uni(idx2),
              cons_list(index_uni(idx1), nil_index_list())),
            (-1 +
              (2 *
                rvalue(r_d2,
                  cons_list(index_uni(k),
                    cons_list(index_uni(k), nil_index_list())), "r_d2"))),
            "assigning variable Rd2");
          current_statement__ = 43;
          if (logical_lt(k, Kd2)) {
            current_statement__ = 41;
            for (int kk = (k + 1); kk <= Kd2; ++kk) {
              current_statement__ = 30;
              idp1 = ((kk * 2) - 1);
              current_statement__ = 31;
              idp2 = (kk * 2);
              current_statement__ = 32;
              assign(Rd2,
                cons_list(index_uni(idx1),
                  cons_list(index_uni(idp1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 33;
              assign(Rd2,
                cons_list(index_uni(idx2),
                  cons_list(index_uni(idp2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 34;
              assign(Rd2,
                cons_list(index_uni(idp1),
                  cons_list(index_uni(idx1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 35;
              assign(Rd2,
                cons_list(index_uni(idp2),
                  cons_list(index_uni(idx2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(kk),
                        cons_list(index_uni(k), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 36;
              assign(Rd2,
                cons_list(index_uni(idx1),
                  cons_list(index_uni(idp2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 37;
              assign(Rd2,
                cons_list(index_uni(idp2),
                  cons_list(index_uni(idx1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 38;
              assign(Rd2,
                cons_list(index_uni(idx2),
                  cons_list(index_uni(idp1), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");
              current_statement__ = 39;
              assign(Rd2,
                cons_list(index_uni(idp1),
                  cons_list(index_uni(idx2), nil_index_list())),
                (-1 +
                  (2 *
                    rvalue(r_d2,
                      cons_list(index_uni(k),
                        cons_list(index_uni(kk), nil_index_list())), "r_d2"))),
                "assigning variable Rd2");}
          } }
      }
      current_statement__ = 47;
      assign(chol_d, nil_index_list(),
        diag_pre_multiply(S_d, cholesky_decompose(Rd2)),
        "assigning variable chol_d");
      current_statement__ = 48;
      assign(chol_p, nil_index_list(), chol_r_p, "assigning variable chol_p");
      current_statement__ = 49;
      assign(chol_g, nil_index_list(), chol_r_g, "assigning variable chol_g");
      {
        int idx1;
        idx1 = std::numeric_limits<int>::min();
        
        int idx2;
        idx2 = std::numeric_limits<int>::min();
        
        current_statement__ = 63;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 52;
          idx1 = ((k * 2) - 1);
          current_statement__ = 53;
          idx2 = (k * 2);
          current_statement__ = 61;
          for (int d = 1; d <= Nd; ++d) {
            current_statement__ = 54;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              ((S_p[(idx1 - 1)] *
                 rvalue(AP,
                   cons_list(index_uni(IDp[(d - 1)][(1 - 1)]),
                     cons_list(index_uni(idx1), nil_index_list())), "AP")) +
                (S_p[(idx2 - 1)] *
                  rvalue(AP,
                    cons_list(index_uni(IDp[(d - 1)][(2 - 1)]),
                      cons_list(index_uni(idx2), nil_index_list())), "AP"))),
              "assigning variable Yd2hat");
            current_statement__ = 55;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              ((S_p[(idx1 - 1)] *
                 rvalue(AP,
                   cons_list(index_uni(IDp[(d - 1)][(2 - 1)]),
                     cons_list(index_uni(idx1), nil_index_list())), "AP")) +
                (S_p[(idx2 - 1)] *
                  rvalue(AP,
                    cons_list(index_uni(IDp[(d - 1)][(1 - 1)]),
                      cons_list(index_uni(idx2), nil_index_list())), "AP"))),
              "assigning variable Yd2hat");
            current_statement__ = 56;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx1), nil_index_list())), "Yd2hat") +
                Mvec[(k - 1)]), "assigning variable Yd2hat");
            current_statement__ = 57;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx2), nil_index_list())), "Yd2hat") +
                Mvec[(k - 1)]), "assigning variable Yd2hat");
            current_statement__ = 58;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx1), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx1), nil_index_list())), "Yd2hat") +
                (S_g[(k - 1)] *
                  rvalue(GG,
                    cons_list(index_uni(IDg[(d - 1)]),
                      cons_list(index_uni(k), nil_index_list())), "GG"))),
              "assigning variable Yd2hat");
            current_statement__ = 59;
            assign(Yd2hat,
              cons_list(index_uni(d),
                cons_list(index_uni(idx2), nil_index_list())),
              (rvalue(Yd2hat,
                 cons_list(index_uni(d),
                   cons_list(index_uni(idx2), nil_index_list())), "Yd2hat") +
                (S_g[(k - 1)] *
                  rvalue(GG,
                    cons_list(index_uni(IDg[(d - 1)]),
                      cons_list(index_uni(k), nil_index_list())), "GG"))),
              "assigning variable Yd2hat");}}
      }
      current_statement__ = 65;
      assign(augYd, nil_index_list(), Yd2, "assigning variable augYd");
      current_statement__ = 66;
      assign(augYp, nil_index_list(), AP, "assigning variable augYp");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            vars__.emplace_back(
              rvalue(Yd2hat,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Yd2hat"));
          }}
        for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
          vars__.emplace_back(S_d[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            vars__.emplace_back(
              rvalue(Rd2,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Rd2"));}}
        for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            vars__.emplace_back(
              rvalue(chol_d,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "chol_d"));
          }}
        for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            vars__.emplace_back(
              rvalue(chol_p,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "chol_p"));
          }}
        for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
            vars__.emplace_back(
              rvalue(chol_g,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "chol_g"));
          }}
        for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            vars__.emplace_back(
              rvalue(augYd,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "augYd"));
          }}
        for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
            vars__.emplace_back(
              rvalue(augYp,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "augYp"));
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> Yd2e;
      Yd2e = Eigen::Matrix<double, -1, -1>(Nd, allKd);
      stan::math::fill(Yd2e, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Rp;
      Rp = Eigen::Matrix<double, -1, -1>(allKp, allKp);
      stan::math::fill(Rp, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> pSigma;
      pSigma = Eigen::Matrix<double, -1, -1>(allKp, allKp);
      stan::math::fill(pSigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> dSigma;
      dSigma = Eigen::Matrix<double, -1, -1>(allKd, allKd);
      stan::math::fill(dSigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Rg;
      Rg = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(Rg, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> gSigma;
      gSigma = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(gSigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Rsq;
      Rsq = Eigen::Matrix<double, -1, -1>(Kd2, 4);
      stan::math::fill(Rsq, std::numeric_limits<double>::quiet_NaN());
      
      {
        current_statement__ = 74;
        validate_non_negative_index("vars", "Kd2", Kd2);
        Eigen::Matrix<double, -1, -1> vars;
        vars = Eigen::Matrix<double, -1, -1>(Kd2, 4);
        stan::math::fill(vars, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 76;
        validate_non_negative_index("totals", "Kd2", Kd2);
        Eigen::Matrix<double, -1, 1> totals;
        totals = Eigen::Matrix<double, -1, 1>(Kd2);
        stan::math::fill(totals, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 85;
        for (int k = 1; k <= Kd2; ++k) {
          current_statement__ = 78;
          assign(vars,
            cons_list(index_uni(k),
              cons_list(index_uni(1), nil_index_list())),
            square(S_g[(k - 1)]), "assigning variable vars");
          current_statement__ = 79;
          assign(vars,
            cons_list(index_uni(k),
              cons_list(index_uni(2), nil_index_list())),
            square(S_p[(((2 * k) - 1) - 1)]), "assigning variable vars");
          current_statement__ = 80;
          assign(vars,
            cons_list(index_uni(k),
              cons_list(index_uni(3), nil_index_list())),
            square(S_p[((2 * k) - 1)]), "assigning variable vars");
          current_statement__ = 81;
          assign(vars,
            cons_list(index_uni(k),
              cons_list(index_uni(4), nil_index_list())),
            square(s_rr[(k - 1)]), "assigning variable vars");
          current_statement__ = 82;
          assign(totals, cons_list(index_uni(k), nil_index_list()),
            sum(
              rvalue(vars,
                cons_list(index_uni(k),
                  cons_list(index_omni(), nil_index_list())), "vars")),
            "assigning variable totals");
          current_statement__ = 83;
          assign(Rsq,
            cons_list(index_uni(k),
              cons_list(index_omni(), nil_index_list())),
            elt_divide(
              rvalue(vars,
                cons_list(index_uni(k),
                  cons_list(index_omni(), nil_index_list())), "vars"),
              totals[(k - 1)]), "assigning variable Rsq");}
      }
      current_statement__ = 87;
      assign(Rg, nil_index_list(),
        multiply_lower_tri_self_transpose(chol_r_g), "assigning variable Rg");
      {
        current_statement__ = 88;
        validate_non_negative_index("chol_g_all", "allKg", allKg);
        current_statement__ = 89;
        validate_non_negative_index("chol_g_all", "allKg", allKg);
        Eigen::Matrix<double, -1, -1> chol_g_all;
        chol_g_all = Eigen::Matrix<double, -1, -1>(allKg, allKg);
        stan::math::fill(chol_g_all, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 91;
        assign(chol_g_all, nil_index_list(),
          diag_pre_multiply(S_g, chol_r_g), "assigning variable chol_g_all");
        current_statement__ = 92;
        assign(gSigma, nil_index_list(),
          multiply_lower_tri_self_transpose(chol_g_all),
          "assigning variable gSigma");
      }
      current_statement__ = 94;
      assign(Yd2e, nil_index_list(), subtract(augYd, Yd2hat),
        "assigning variable Yd2e");
      current_statement__ = 95;
      assign(Rp, nil_index_list(),
        multiply_lower_tri_self_transpose(chol_r_p), "assigning variable Rp");
      {
        current_statement__ = 96;
        validate_non_negative_index("chol_p_all", "allKp", allKp);
        current_statement__ = 97;
        validate_non_negative_index("chol_p_all", "allKp", allKp);
        Eigen::Matrix<double, -1, -1> chol_p_all;
        chol_p_all = Eigen::Matrix<double, -1, -1>(allKp, allKp);
        stan::math::fill(chol_p_all, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 99;
        assign(chol_p_all, nil_index_list(),
          diag_pre_multiply(S_p, chol_r_p), "assigning variable chol_p_all");
        current_statement__ = 100;
        assign(pSigma, nil_index_list(),
          multiply_lower_tri_self_transpose(chol_p_all),
          "assigning variable pSigma");
      }
      current_statement__ = 102;
      assign(dSigma, nil_index_list(),
        multiply_lower_tri_self_transpose(chol_d),
        "assigning variable dSigma");
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
          vars__.emplace_back(
            rvalue(Yd2e,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Yd2e"));}}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
          vars__.emplace_back(
            rvalue(Rp,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Rp"));}}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
          vars__.emplace_back(
            rvalue(pSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "pSigma"));}
      }
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
          vars__.emplace_back(
            rvalue(dSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "dSigma"));}
      }
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          vars__.emplace_back(
            rvalue(Rg,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Rg"));}}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          vars__.emplace_back(
            rvalue(gSigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "gSigma"));}
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          vars__.emplace_back(
            rvalue(Rsq,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Rsq"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> Mvec;
      Mvec = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(Mvec, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Mvec_flat__;
        current_statement__ = 1;
        assign(Mvec_flat__, nil_index_list(), context__.vals_r("Mvec"),
          "assigning variable Mvec_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 1;
          assign(Mvec, cons_list(index_uni(sym1__), nil_index_list()),
            Mvec_flat__[(pos__ - 1)], "assigning variable Mvec");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> s_rr;
      s_rr = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(s_rr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_rr_flat__;
        current_statement__ = 2;
        assign(s_rr_flat__, nil_index_list(), context__.vals_r("s_rr"),
          "assigning variable s_rr_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 2;
          assign(s_rr, cons_list(index_uni(sym1__), nil_index_list()),
            s_rr_flat__[(pos__ - 1)], "assigning variable s_rr");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> s_rr_free__;
      s_rr_free__ = Eigen::Matrix<double, -1, 1>(Kd2);
      stan::math::fill(s_rr_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 2;
        assign(s_rr_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(s_rr[(sym1__ - 1)], 0),
          "assigning variable s_rr_free__");}
      Eigen::Matrix<double, -1, 1> S_p;
      S_p = Eigen::Matrix<double, -1, 1>(allKp);
      stan::math::fill(S_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> S_p_flat__;
        current_statement__ = 3;
        assign(S_p_flat__, nil_index_list(), context__.vals_r("S_p"),
          "assigning variable S_p_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
          current_statement__ = 3;
          assign(S_p, cons_list(index_uni(sym1__), nil_index_list()),
            S_p_flat__[(pos__ - 1)], "assigning variable S_p");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> S_p_free__;
      S_p_free__ = Eigen::Matrix<double, -1, 1>(allKp);
      stan::math::fill(S_p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        current_statement__ = 3;
        assign(S_p_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(S_p[(sym1__ - 1)], 0),
          "assigning variable S_p_free__");}
      Eigen::Matrix<double, -1, -1> chol_r_p;
      chol_r_p = Eigen::Matrix<double, -1, -1>(allKp, allKp);
      stan::math::fill(chol_r_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> chol_r_p_flat__;
        current_statement__ = 4;
        assign(chol_r_p_flat__, nil_index_list(),
          context__.vals_r("chol_r_p"), "assigning variable chol_r_p_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            current_statement__ = 4;
            assign(chol_r_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              chol_r_p_flat__[(pos__ - 1)], "assigning variable chol_r_p");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> chol_r_p_free__;
      chol_r_p_free__ = Eigen::Matrix<double, -1, 1>(((allKp * (allKp - 1)) /
                                                       2));
      stan::math::fill(chol_r_p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(chol_r_p_free__, nil_index_list(),
        stan::math::cholesky_corr_free(chol_r_p),
        "assigning variable chol_r_p_free__");
      Eigen::Matrix<double, -1, -1> r_d2;
      r_d2 = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(r_d2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> r_d2_flat__;
        current_statement__ = 5;
        assign(r_d2_flat__, nil_index_list(), context__.vals_r("r_d2"),
          "assigning variable r_d2_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            current_statement__ = 5;
            assign(r_d2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              r_d2_flat__[(pos__ - 1)], "assigning variable r_d2");
            current_statement__ = 5;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> r_d2_free__;
      r_d2_free__ = Eigen::Matrix<double, -1, -1>(Kd2, Kd2);
      stan::math::fill(r_d2_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          current_statement__ = 5;
          assign(r_d2_free__,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            stan::math::lub_free(
              rvalue(r_d2,
                cons_list(index_uni(sym1__),
                  cons_list(index_uni(sym2__), nil_index_list())), "r_d2"),
              0, 1), "assigning variable r_d2_free__");}}
      Eigen::Matrix<double, -1, -1> AP;
      AP = Eigen::Matrix<double, -1, -1>(Np, AP_2dim__);
      stan::math::fill(AP, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> AP_flat__;
        current_statement__ = 6;
        assign(AP_flat__, nil_index_list(), context__.vals_r("AP"),
          "assigning variable AP_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= AP_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
            current_statement__ = 6;
            assign(AP,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              AP_flat__[(pos__ - 1)], "assigning variable AP");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> GG;
      GG = Eigen::Matrix<double, -1, -1>(Ng, allKg);
      stan::math::fill(GG, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> GG_flat__;
        current_statement__ = 7;
        assign(GG_flat__, nil_index_list(), context__.vals_r("GG"),
          "assigning variable GG_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
            current_statement__ = 7;
            assign(GG,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              GG_flat__[(pos__ - 1)], "assigning variable GG");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> S_g;
      S_g = Eigen::Matrix<double, -1, 1>(allKg);
      stan::math::fill(S_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> S_g_flat__;
        current_statement__ = 8;
        assign(S_g_flat__, nil_index_list(), context__.vals_r("S_g"),
          "assigning variable S_g_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
          current_statement__ = 8;
          assign(S_g, cons_list(index_uni(sym1__), nil_index_list()),
            S_g_flat__[(pos__ - 1)], "assigning variable S_g");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> S_g_free__;
      S_g_free__ = Eigen::Matrix<double, -1, 1>(allKg);
      stan::math::fill(S_g_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        current_statement__ = 8;
        assign(S_g_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(S_g[(sym1__ - 1)], 0),
          "assigning variable S_g_free__");}
      Eigen::Matrix<double, -1, -1> chol_r_g;
      chol_r_g = Eigen::Matrix<double, -1, -1>(allKg, allKg);
      stan::math::fill(chol_r_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> chol_r_g_flat__;
        current_statement__ = 9;
        assign(chol_r_g_flat__, nil_index_list(),
          context__.vals_r("chol_r_g"), "assigning variable chol_r_g_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
            current_statement__ = 9;
            assign(chol_r_g,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              chol_r_g_flat__[(pos__ - 1)], "assigning variable chol_r_g");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> chol_r_g_free__;
      chol_r_g_free__ = Eigen::Matrix<double, -1, 1>(((allKg * (allKg - 1)) /
                                                       2));
      stan::math::fill(chol_r_g_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(chol_r_g_free__, nil_index_list(),
        stan::math::cholesky_corr_free(chol_r_g),
        "assigning variable chol_r_g_free__");
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        vars__.emplace_back(Mvec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        vars__.emplace_back(s_rr_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        vars__.emplace_back(S_p_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((allKp * (allKp - 1)) / 2); ++sym1__) {
        vars__.emplace_back(chol_r_p_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          vars__.emplace_back(
            rvalue(r_d2_free__,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "r_d2_free__"));}}
      for (int sym1__ = 1; sym1__ <= AP_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
          vars__.emplace_back(
            rvalue(AP,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "AP"));}}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
          vars__.emplace_back(
            rvalue(GG,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "GG"));}}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        vars__.emplace_back(S_g_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((allKg * (allKg - 1)) / 2); ++sym1__) {
        vars__.emplace_back(chol_r_g_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("Mvec");
    names__.emplace_back("s_rr");
    names__.emplace_back("S_p");
    names__.emplace_back("chol_r_p");
    names__.emplace_back("r_d2");
    names__.emplace_back("AP");
    names__.emplace_back("GG");
    names__.emplace_back("S_g");
    names__.emplace_back("chol_r_g");
    names__.emplace_back("Yd2hat");
    names__.emplace_back("S_d");
    names__.emplace_back("Rd2");
    names__.emplace_back("chol_d");
    names__.emplace_back("chol_p");
    names__.emplace_back("chol_g");
    names__.emplace_back("augYd");
    names__.emplace_back("augYp");
    names__.emplace_back("Yd2e");
    names__.emplace_back("Rp");
    names__.emplace_back("pSigma");
    names__.emplace_back("dSigma");
    names__.emplace_back("Rg");
    names__.emplace_back("gSigma");
    names__.emplace_back("Rsq");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKp),
                                             static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2),
                                             static_cast<size_t>(Kd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Np),
                                             static_cast<size_t>(AP_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ng),
                                             static_cast<size_t>(allKg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKg),
                                             static_cast<size_t>(allKg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKp),
                                             static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKg),
                                             static_cast<size_t>(allKg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Np),
                                             static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKp),
                                             static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKp),
                                             static_cast<size_t>(allKp)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(allKd),
                                             static_cast<size_t>(allKd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2),
                                             static_cast<size_t>(Kd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2),
                                             static_cast<size_t>(Kd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kd2),
                                             static_cast<size_t>(4)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Mvec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s_rr" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "chol_r_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r_d2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= AP_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "AP" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "GG" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "chol_r_g" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Yd2hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "S_d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rd2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_g" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "augYd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "augYp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Yd2e" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rsq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Mvec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s_rr" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((allKp * (allKp - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "chol_r_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "r_d2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= AP_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "AP" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "GG" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((allKg * (allKg - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "chol_r_g" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Yd2hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "S_d" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rd2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKg; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKg; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chol_g" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "augYd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Np; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "augYp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Yd2e" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKp; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKp; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= allKd; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= allKd; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Kd2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gSigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Kd2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Rsq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Mvec\",\"type\":{\"name\":\"vector\",\"length\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"s_rr\",\"type\":{\"name\":\"vector\",\"length\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"S_p\",\"type\":{\"name\":\"vector\",\"length\":" << allKp << "},\"block\":\"parameters\"},{\"name\":\"chol_r_p\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"parameters\"},{\"name\":\"r_d2\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"AP\",\"type\":{\"name\":\"matrix\",\"rows\":" << Np << ",\"cols\":" << AP_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"GG\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ng << ",\"cols\":" << allKg << "},\"block\":\"parameters\"},{\"name\":\"S_g\",\"type\":{\"name\":\"vector\",\"length\":" << allKg << "},\"block\":\"parameters\"},{\"name\":\"chol_r_g\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKg << ",\"cols\":" << allKg << "},\"block\":\"parameters\"},{\"name\":\"Yd2hat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"S_d\",\"type\":{\"name\":\"vector\",\"length\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"Rd2\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_d\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_p\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_g\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKg << ",\"cols\":" << allKg << "},\"block\":\"transformed_parameters\"},{\"name\":\"augYd\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"augYp\",\"type\":{\"name\":\"matrix\",\"rows\":" << Np << ",\"cols\":" << allKp << "},\"block\":\"transformed_parameters\"},{\"name\":\"Yd2e\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"generated_quantities\"},{\"name\":\"Rp\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"generated_quantities\"},{\"name\":\"pSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"generated_quantities\"},{\"name\":\"dSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"generated_quantities\"},{\"name\":\"Rg\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"generated_quantities\"},{\"name\":\"gSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"generated_quantities\"},{\"name\":\"Rsq\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << 4 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Mvec\",\"type\":{\"name\":\"vector\",\"length\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"s_rr\",\"type\":{\"name\":\"vector\",\"length\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"S_p\",\"type\":{\"name\":\"vector\",\"length\":" << allKp << "},\"block\":\"parameters\"},{\"name\":\"chol_r_p\",\"type\":{\"name\":\"vector\",\"length\":" << ((allKp * (allKp - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"r_d2\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"parameters\"},{\"name\":\"AP\",\"type\":{\"name\":\"matrix\",\"rows\":" << Np << ",\"cols\":" << AP_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"GG\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ng << ",\"cols\":" << allKg << "},\"block\":\"parameters\"},{\"name\":\"S_g\",\"type\":{\"name\":\"vector\",\"length\":" << allKg << "},\"block\":\"parameters\"},{\"name\":\"chol_r_g\",\"type\":{\"name\":\"vector\",\"length\":" << ((allKg * (allKg - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"Yd2hat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"S_d\",\"type\":{\"name\":\"vector\",\"length\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"Rd2\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_d\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_p\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"transformed_parameters\"},{\"name\":\"chol_g\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKg << ",\"cols\":" << allKg << "},\"block\":\"transformed_parameters\"},{\"name\":\"augYd\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"transformed_parameters\"},{\"name\":\"augYp\",\"type\":{\"name\":\"matrix\",\"rows\":" << Np << ",\"cols\":" << allKp << "},\"block\":\"transformed_parameters\"},{\"name\":\"Yd2e\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nd << ",\"cols\":" << allKd << "},\"block\":\"generated_quantities\"},{\"name\":\"Rp\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"generated_quantities\"},{\"name\":\"pSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKp << ",\"cols\":" << allKp << "},\"block\":\"generated_quantities\"},{\"name\":\"dSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << allKd << ",\"cols\":" << allKd << "},\"block\":\"generated_quantities\"},{\"name\":\"Rg\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"generated_quantities\"},{\"name\":\"gSigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << Kd2 << "},\"block\":\"generated_quantities\"},{\"name\":\"Rsq\",\"type\":{\"name\":\"matrix\",\"rows\":" << Kd2 << ",\"cols\":" << 4 << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_RR_con_comp_gN_namespace::model_RR_con_comp_gN;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_RR_con_comp_gN_namespace::profiles__;
}
#endif
#endif
