// Generated by rstantools.  Do not edit by hand.

/*
    lavaan.srm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    lavaan.srm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with lavaan.srm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_RR_con_comp_gN_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_RR_con_comp_gN");
    reader.add_event(22, 22, "include", "/multigroup/group_data.stan");
    reader.add_event(22, 0, "start", "/multigroup/group_data.stan");
    reader.add_event(29, 7, "end", "/multigroup/group_data.stan");
    reader.add_event(29, 23, "restart", "model_RR_con_comp_gN");
    reader.add_event(31, 25, "include", "/means/means_data.stan");
    reader.add_event(31, 0, "start", "/means/means_data.stan");
    reader.add_event(33, 2, "end", "/means/means_data.stan");
    reader.add_event(33, 26, "restart", "model_RR_con_comp_gN");
    reader.add_event(44, 37, "include", "/vanilla/tdata_allKd.stan");
    reader.add_event(44, 0, "start", "/vanilla/tdata_allKd.stan");
    reader.add_event(47, 3, "end", "/vanilla/tdata_allKd.stan");
    reader.add_event(47, 38, "restart", "model_RR_con_comp_gN");
    reader.add_event(47, 38, "include", "/vanilla/tdata_allKp.stan");
    reader.add_event(47, 0, "start", "/vanilla/tdata_allKp.stan");
    reader.add_event(50, 3, "end", "/vanilla/tdata_allKp.stan");
    reader.add_event(50, 39, "restart", "model_RR_con_comp_gN");
    reader.add_event(50, 39, "include", "/vanilla/tdata_allKg.stan");
    reader.add_event(50, 0, "start", "/vanilla/tdata_allKg.stan");
    reader.add_event(53, 3, "end", "/vanilla/tdata_allKg.stan");
    reader.add_event(53, 40, "restart", "model_RR_con_comp_gN");
    reader.add_event(56, 43, "include", "/means/means_parameters.stan");
    reader.add_event(56, 0, "start", "/means/means_parameters.stan");
    reader.add_event(57, 1, "end", "/means/means_parameters.stan");
    reader.add_event(57, 44, "restart", "model_RR_con_comp_gN");
    reader.add_event(73, 60, "include", "/multigroup/group_parameters.stan");
    reader.add_event(73, 0, "start", "/multigroup/group_parameters.stan");
    reader.add_event(77, 4, "end", "/multigroup/group_parameters.stan");
    reader.add_event(77, 61, "restart", "model_RR_con_comp_gN");
    reader.add_event(88, 72, "include", "/multigroup/group_tpar_declare.stan");
    reader.add_event(88, 0, "start", "/multigroup/group_tpar_declare.stan");
    reader.add_event(89, 1, "end", "/multigroup/group_tpar_declare.stan");
    reader.add_event(89, 73, "restart", "model_RR_con_comp_gN");
    reader.add_event(136, 120, "include", "/vanilla/tpar_chol_p.stan");
    reader.add_event(136, 0, "start", "/vanilla/tpar_chol_p.stan");
    reader.add_event(137, 1, "end", "/vanilla/tpar_chol_p.stan");
    reader.add_event(137, 121, "restart", "model_RR_con_comp_gN");
    reader.add_event(137, 121, "include", "/vanilla/tpar_chol_g.stan");
    reader.add_event(137, 0, "start", "/vanilla/tpar_chol_g.stan");
    reader.add_event(138, 1, "end", "/vanilla/tpar_chol_g.stan");
    reader.add_event(138, 122, "restart", "model_RR_con_comp_gN");
    reader.add_event(153, 137, "include", "/means/means_tparameters.stan");
    reader.add_event(153, 0, "start", "/means/means_tparameters.stan");
    reader.add_event(159, 6, "end", "/means/means_tparameters.stan");
    reader.add_event(159, 138, "restart", "model_RR_con_comp_gN");
    reader.add_event(159, 138, "include", "/multigroup/group_tparameters.stan");
    reader.add_event(159, 0, "start", "/multigroup/group_tparameters.stan");
    reader.add_event(165, 6, "end", "/multigroup/group_tparameters.stan");
    reader.add_event(165, 139, "restart", "model_RR_con_comp_gN");
    reader.add_event(173, 147, "include", "/vanilla/tpar_augYd.stan");
    reader.add_event(173, 0, "start", "/vanilla/tpar_augYd.stan");
    reader.add_event(174, 1, "end", "/vanilla/tpar_augYd.stan");
    reader.add_event(174, 148, "restart", "model_RR_con_comp_gN");
    reader.add_event(174, 148, "include", "/vanilla/tpar_augYp.stan");
    reader.add_event(174, 0, "start", "/vanilla/tpar_augYp.stan");
    reader.add_event(175, 1, "end", "/vanilla/tpar_augYp.stan");
    reader.add_event(175, 149, "restart", "model_RR_con_comp_gN");
    reader.add_event(181, 155, "include", "/means/means_model.stan");
    reader.add_event(181, 0, "start", "/means/means_model.stan");
    reader.add_event(183, 2, "end", "/means/means_model.stan");
    reader.add_event(183, 156, "restart", "model_RR_con_comp_gN");
    reader.add_event(208, 181, "include", "/multigroup/group_model.stan");
    reader.add_event(208, 0, "start", "/multigroup/group_model.stan");
    reader.add_event(222, 14, "end", "/multigroup/group_model.stan");
    reader.add_event(222, 182, "restart", "model_RR_con_comp_gN");
    reader.add_event(229, 189, "include", "/multigroup/group_GQs.stan");
    reader.add_event(229, 0, "start", "/multigroup/group_GQs.stan");
    reader.add_event(260, 31, "end", "/multigroup/group_GQs.stan");
    reader.add_event(260, 190, "restart", "model_RR_con_comp_gN");
    reader.add_event(276, 206, "include", "/include/license.stan");
    reader.add_event(276, 0, "start", "/include/license.stan");
    reader.add_event(290, 14, "end", "/include/license.stan");
    reader.add_event(290, 207, "restart", "model_RR_con_comp_gN");
    reader.add_event(292, 207, "end", "model_RR_con_comp_gN");
    return reader;
}
#include <stan_meta_header.hpp>
class model_RR_con_comp_gN
  : public stan::model::model_base_crtp<model_RR_con_comp_gN> {
private:
        int Nd;
        int Np;
        int Kd2;
        matrix_d Yd2;
        std::vector<std::vector<int> > IDp;
        int Ng;
        std::vector<int> IDg;
        matrix_d rr_group_t;
        double group_lkj;
        vector_d rr_Mvec_m;
        vector_d rr_Mvec_sd;
        matrix_d rr_rel_t;
        matrix_d rr_out_t;
        matrix_d rr_in_t;
        double case_lkj;
        matrix_d rr_beta_a;
        matrix_d rr_beta_b;
        int allKd;
        int allKp;
        int allKg;
public:
    model_RR_con_comp_gN(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_RR_con_comp_gN(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_RR_con_comp_gN_namespace::model_RR_con_comp_gN";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "Nd", "int", context__.to_vec());
            Nd = int(0);
            vals_i__ = context__.vals_i("Nd");
            pos__ = 0;
            Nd = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nd", Nd, 0);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "Np", "int", context__.to_vec());
            Np = int(0);
            vals_i__ = context__.vals_i("Np");
            pos__ = 0;
            Np = vals_i__[pos__++];
            check_greater_or_equal(function__, "Np", Np, 0);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "Kd2", "int", context__.to_vec());
            Kd2 = int(0);
            vals_i__ = context__.vals_i("Kd2");
            pos__ = 0;
            Kd2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "Kd2", Kd2, 0);
            current_statement_begin__ = 19;
            validate_non_negative_index("Yd2", "Nd", Nd);
            validate_non_negative_index("Yd2", "(2 * Kd2)", (2 * Kd2));
            context__.validate_dims("data initialization", "Yd2", "matrix_d", context__.to_vec(Nd,(2 * Kd2)));
            Yd2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Nd, (2 * Kd2));
            vals_r__ = context__.vals_r("Yd2");
            pos__ = 0;
            size_t Yd2_j_2_max__ = (2 * Kd2);
            size_t Yd2_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < Yd2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Yd2_j_1_max__; ++j_1__) {
                    Yd2(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("IDp", "Nd", Nd);
            validate_non_negative_index("IDp", "2", 2);
            context__.validate_dims("data initialization", "IDp", "int", context__.to_vec(Nd,2));
            IDp = std::vector<std::vector<int> >(Nd, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("IDp");
            pos__ = 0;
            size_t IDp_k_0_max__ = Nd;
            size_t IDp_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < IDp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < IDp_k_0_max__; ++k_0__) {
                    IDp[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "Ng", "int", context__.to_vec());
            Ng = int(0);
            vals_i__ = context__.vals_i("Ng");
            pos__ = 0;
            Ng = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ng", Ng, 0);
            current_statement_begin__ = 25;
            validate_non_negative_index("IDg", "Nd", Nd);
            context__.validate_dims("data initialization", "IDg", "int", context__.to_vec(Nd));
            IDg = std::vector<int>(Nd, int(0));
            vals_i__ = context__.vals_i("IDg");
            pos__ = 0;
            size_t IDg_k_0_max__ = Nd;
            for (size_t k_0__ = 0; k_0__ < IDg_k_0_max__; ++k_0__) {
                IDg[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("rr_group_t", "Kd2", Kd2);
            validate_non_negative_index("rr_group_t", "3", 3);
            context__.validate_dims("data initialization", "rr_group_t", "matrix_d", context__.to_vec(Kd2,3));
            rr_group_t = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, 3);
            vals_r__ = context__.vals_r("rr_group_t");
            pos__ = 0;
            size_t rr_group_t_j_2_max__ = 3;
            size_t rr_group_t_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_group_t_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_group_t_j_1_max__; ++j_1__) {
                    rr_group_t(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "group_lkj", "double", context__.to_vec());
            group_lkj = double(0);
            vals_r__ = context__.vals_r("group_lkj");
            pos__ = 0;
            group_lkj = vals_r__[pos__++];
            current_statement_begin__ = 32;
            validate_non_negative_index("rr_Mvec_m", "Kd2", Kd2);
            context__.validate_dims("data initialization", "rr_Mvec_m", "vector_d", context__.to_vec(Kd2));
            rr_Mvec_m = Eigen::Matrix<double, Eigen::Dynamic, 1>(Kd2);
            vals_r__ = context__.vals_r("rr_Mvec_m");
            pos__ = 0;
            size_t rr_Mvec_m_j_1_max__ = Kd2;
            for (size_t j_1__ = 0; j_1__ < rr_Mvec_m_j_1_max__; ++j_1__) {
                rr_Mvec_m(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("rr_Mvec_sd", "Kd2", Kd2);
            context__.validate_dims("data initialization", "rr_Mvec_sd", "vector_d", context__.to_vec(Kd2));
            rr_Mvec_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(Kd2);
            vals_r__ = context__.vals_r("rr_Mvec_sd");
            pos__ = 0;
            size_t rr_Mvec_sd_j_1_max__ = Kd2;
            for (size_t j_1__ = 0; j_1__ < rr_Mvec_sd_j_1_max__; ++j_1__) {
                rr_Mvec_sd(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("rr_rel_t", "Kd2", Kd2);
            validate_non_negative_index("rr_rel_t", "3", 3);
            context__.validate_dims("data initialization", "rr_rel_t", "matrix_d", context__.to_vec(Kd2,3));
            rr_rel_t = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, 3);
            vals_r__ = context__.vals_r("rr_rel_t");
            pos__ = 0;
            size_t rr_rel_t_j_2_max__ = 3;
            size_t rr_rel_t_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_rel_t_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_rel_t_j_1_max__; ++j_1__) {
                    rr_rel_t(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("rr_out_t", "Kd2", Kd2);
            validate_non_negative_index("rr_out_t", "3", 3);
            context__.validate_dims("data initialization", "rr_out_t", "matrix_d", context__.to_vec(Kd2,3));
            rr_out_t = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, 3);
            vals_r__ = context__.vals_r("rr_out_t");
            pos__ = 0;
            size_t rr_out_t_j_2_max__ = 3;
            size_t rr_out_t_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_out_t_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_out_t_j_1_max__; ++j_1__) {
                    rr_out_t(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("rr_in_t", "Kd2", Kd2);
            validate_non_negative_index("rr_in_t", "3", 3);
            context__.validate_dims("data initialization", "rr_in_t", "matrix_d", context__.to_vec(Kd2,3));
            rr_in_t = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, 3);
            vals_r__ = context__.vals_r("rr_in_t");
            pos__ = 0;
            size_t rr_in_t_j_2_max__ = 3;
            size_t rr_in_t_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_in_t_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_in_t_j_1_max__; ++j_1__) {
                    rr_in_t(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "case_lkj", "double", context__.to_vec());
            case_lkj = double(0);
            vals_r__ = context__.vals_r("case_lkj");
            pos__ = 0;
            case_lkj = vals_r__[pos__++];
            current_statement_begin__ = 41;
            validate_non_negative_index("rr_beta_a", "Kd2", Kd2);
            validate_non_negative_index("rr_beta_a", "Kd2", Kd2);
            context__.validate_dims("data initialization", "rr_beta_a", "matrix_d", context__.to_vec(Kd2,Kd2));
            rr_beta_a = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, Kd2);
            vals_r__ = context__.vals_r("rr_beta_a");
            pos__ = 0;
            size_t rr_beta_a_j_2_max__ = Kd2;
            size_t rr_beta_a_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_beta_a_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_beta_a_j_1_max__; ++j_1__) {
                    rr_beta_a(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("rr_beta_b", "Kd2", Kd2);
            validate_non_negative_index("rr_beta_b", "Kd2", Kd2);
            context__.validate_dims("data initialization", "rr_beta_b", "matrix_d", context__.to_vec(Kd2,Kd2));
            rr_beta_b = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kd2, Kd2);
            vals_r__ = context__.vals_r("rr_beta_b");
            pos__ = 0;
            size_t rr_beta_b_j_2_max__ = Kd2;
            size_t rr_beta_b_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < rr_beta_b_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < rr_beta_b_j_1_max__; ++j_1__) {
                    rr_beta_b(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 47;
            allKd = int(0);
            stan::math::fill(allKd, std::numeric_limits<int>::min());
            stan::math::assign(allKd,(2 * Kd2));
            current_statement_begin__ = 50;
            allKp = int(0);
            stan::math::fill(allKp, std::numeric_limits<int>::min());
            stan::math::assign(allKp,(2 * Kd2));
            current_statement_begin__ = 53;
            allKg = int(0);
            stan::math::fill(allKg, std::numeric_limits<int>::min());
            stan::math::assign(allKg,Kd2);
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 57;
            validate_non_negative_index("Mvec", "Kd2", Kd2);
            num_params_r__ += Kd2;
            current_statement_begin__ = 60;
            validate_non_negative_index("s_rr", "Kd2", Kd2);
            num_params_r__ += Kd2;
            current_statement_begin__ = 61;
            validate_non_negative_index("S_p", "allKp", allKp);
            num_params_r__ += allKp;
            current_statement_begin__ = 64;
            validate_non_negative_index("chol_r_p", "allKp", allKp);
            validate_non_negative_index("chol_r_p", "allKp", allKp);
            num_params_r__ += ((allKp * (allKp - 1)) / 2);
            current_statement_begin__ = 69;
            validate_non_negative_index("r_d2", "Kd2", Kd2);
            validate_non_negative_index("r_d2", "Kd2", Kd2);
            num_params_r__ += (Kd2 * Kd2);
            current_statement_begin__ = 72;
            validate_non_negative_index("AP", "Np", Np);
            validate_non_negative_index("AP", "(2 * Kd2)", (2 * Kd2));
            num_params_r__ += (Np * (2 * Kd2));
            current_statement_begin__ = 75;
            validate_non_negative_index("GG", "Ng", Ng);
            validate_non_negative_index("GG", "allKg", allKg);
            num_params_r__ += (Ng * allKg);
            current_statement_begin__ = 76;
            validate_non_negative_index("S_g", "allKg", allKg);
            num_params_r__ += allKg;
            current_statement_begin__ = 77;
            validate_non_negative_index("chol_r_g", "allKg", allKg);
            validate_non_negative_index("chol_r_g", "allKg", allKg);
            num_params_r__ += ((allKg * (allKg - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_RR_con_comp_gN() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 57;
        if (!(context__.contains_r("Mvec")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Mvec missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Mvec");
        pos__ = 0U;
        validate_non_negative_index("Mvec", "Kd2", Kd2);
        context__.validate_dims("parameter initialization", "Mvec", "vector_d", context__.to_vec(Kd2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> Mvec(Kd2);
        size_t Mvec_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < Mvec_j_1_max__; ++j_1__) {
            Mvec(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(Mvec);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Mvec: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("s_rr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_rr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_rr");
        pos__ = 0U;
        validate_non_negative_index("s_rr", "Kd2", Kd2);
        context__.validate_dims("parameter initialization", "s_rr", "vector_d", context__.to_vec(Kd2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> s_rr(Kd2);
        size_t s_rr_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < s_rr_j_1_max__; ++j_1__) {
            s_rr(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, s_rr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_rr: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("S_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_p");
        pos__ = 0U;
        validate_non_negative_index("S_p", "allKp", allKp);
        context__.validate_dims("parameter initialization", "S_p", "vector_d", context__.to_vec(allKp));
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_p(allKp);
        size_t S_p_j_1_max__ = allKp;
        for (size_t j_1__ = 0; j_1__ < S_p_j_1_max__; ++j_1__) {
            S_p(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, S_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("chol_r_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable chol_r_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("chol_r_p");
        pos__ = 0U;
        validate_non_negative_index("chol_r_p", "allKp", allKp);
        validate_non_negative_index("chol_r_p", "allKp", allKp);
        context__.validate_dims("parameter initialization", "chol_r_p", "matrix_d", context__.to_vec(allKp,allKp));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_r_p(allKp, allKp);
        size_t chol_r_p_j_2_max__ = allKp;
        size_t chol_r_p_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < chol_r_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_p_j_1_max__; ++j_1__) {
                chol_r_p(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(chol_r_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable chol_r_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("r_d2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r_d2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r_d2");
        pos__ = 0U;
        validate_non_negative_index("r_d2", "Kd2", Kd2);
        validate_non_negative_index("r_d2", "Kd2", Kd2);
        context__.validate_dims("parameter initialization", "r_d2", "matrix_d", context__.to_vec(Kd2,Kd2));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> r_d2(Kd2, Kd2);
        size_t r_d2_j_2_max__ = Kd2;
        size_t r_d2_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < r_d2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < r_d2_j_1_max__; ++j_1__) {
                r_d2(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(0, 1, r_d2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r_d2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("AP")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable AP missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("AP");
        pos__ = 0U;
        validate_non_negative_index("AP", "Np", Np);
        validate_non_negative_index("AP", "(2 * Kd2)", (2 * Kd2));
        context__.validate_dims("parameter initialization", "AP", "matrix_d", context__.to_vec(Np,(2 * Kd2)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> AP(Np, (2 * Kd2));
        size_t AP_j_2_max__ = (2 * Kd2);
        size_t AP_j_1_max__ = Np;
        for (size_t j_2__ = 0; j_2__ < AP_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < AP_j_1_max__; ++j_1__) {
                AP(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(AP);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable AP: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("GG")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable GG missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("GG");
        pos__ = 0U;
        validate_non_negative_index("GG", "Ng", Ng);
        validate_non_negative_index("GG", "allKg", allKg);
        context__.validate_dims("parameter initialization", "GG", "matrix_d", context__.to_vec(Ng,allKg));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> GG(Ng, allKg);
        size_t GG_j_2_max__ = allKg;
        size_t GG_j_1_max__ = Ng;
        for (size_t j_2__ = 0; j_2__ < GG_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < GG_j_1_max__; ++j_1__) {
                GG(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(GG);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable GG: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 76;
        if (!(context__.contains_r("S_g")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_g missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_g");
        pos__ = 0U;
        validate_non_negative_index("S_g", "allKg", allKg);
        context__.validate_dims("parameter initialization", "S_g", "vector_d", context__.to_vec(allKg));
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_g(allKg);
        size_t S_g_j_1_max__ = allKg;
        for (size_t j_1__ = 0; j_1__ < S_g_j_1_max__; ++j_1__) {
            S_g(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, S_g);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_g: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("chol_r_g")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable chol_r_g missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("chol_r_g");
        pos__ = 0U;
        validate_non_negative_index("chol_r_g", "allKg", allKg);
        validate_non_negative_index("chol_r_g", "allKg", allKg);
        context__.validate_dims("parameter initialization", "chol_r_g", "matrix_d", context__.to_vec(allKg,allKg));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_r_g(allKg, allKg);
        size_t chol_r_g_j_2_max__ = allKg;
        size_t chol_r_g_j_1_max__ = allKg;
        for (size_t j_2__ = 0; j_2__ < chol_r_g_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_g_j_1_max__; ++j_1__) {
                chol_r_g(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(chol_r_g);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable chol_r_g: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Mvec;
            (void) Mvec;  // dummy to suppress unused var warning
            if (jacobian__)
                Mvec = in__.vector_constrain(Kd2, lp__);
            else
                Mvec = in__.vector_constrain(Kd2);
            current_statement_begin__ = 60;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s_rr;
            (void) s_rr;  // dummy to suppress unused var warning
            if (jacobian__)
                s_rr = in__.vector_lb_constrain(0, Kd2, lp__);
            else
                s_rr = in__.vector_lb_constrain(0, Kd2);
            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_p;
            (void) S_p;  // dummy to suppress unused var warning
            if (jacobian__)
                S_p = in__.vector_lb_constrain(0, allKp, lp__);
            else
                S_p = in__.vector_lb_constrain(0, allKp);
            current_statement_begin__ = 64;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_r_p;
            (void) chol_r_p;  // dummy to suppress unused var warning
            if (jacobian__)
                chol_r_p = in__.cholesky_factor_corr_constrain(allKp, lp__);
            else
                chol_r_p = in__.cholesky_factor_corr_constrain(allKp);
            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> r_d2;
            (void) r_d2;  // dummy to suppress unused var warning
            if (jacobian__)
                r_d2 = in__.matrix_lub_constrain(0, 1, Kd2, Kd2, lp__);
            else
                r_d2 = in__.matrix_lub_constrain(0, 1, Kd2, Kd2);
            current_statement_begin__ = 72;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> AP;
            (void) AP;  // dummy to suppress unused var warning
            if (jacobian__)
                AP = in__.matrix_constrain(Np, (2 * Kd2), lp__);
            else
                AP = in__.matrix_constrain(Np, (2 * Kd2));
            current_statement_begin__ = 75;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> GG;
            (void) GG;  // dummy to suppress unused var warning
            if (jacobian__)
                GG = in__.matrix_constrain(Ng, allKg, lp__);
            else
                GG = in__.matrix_constrain(Ng, allKg);
            current_statement_begin__ = 76;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_g;
            (void) S_g;  // dummy to suppress unused var warning
            if (jacobian__)
                S_g = in__.vector_lb_constrain(0, allKg, lp__);
            else
                S_g = in__.vector_lb_constrain(0, allKg);
            current_statement_begin__ = 77;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_r_g;
            (void) chol_r_g;  // dummy to suppress unused var warning
            if (jacobian__)
                chol_r_g = in__.cholesky_factor_corr_constrain(allKg, lp__);
            else
                chol_r_g = in__.cholesky_factor_corr_constrain(allKg);
            // transformed parameters
            current_statement_begin__ = 82;
            validate_non_negative_index("Yd2hat", "Nd", Nd);
            validate_non_negative_index("Yd2hat", "allKd", allKd);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Yd2hat(Nd, allKd);
            stan::math::initialize(Yd2hat, DUMMY_VAR__);
            stan::math::fill(Yd2hat, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("S_d", "allKd", allKd);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_d(allKd);
            stan::math::initialize(S_d, DUMMY_VAR__);
            stan::math::fill(S_d, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("Rd2", "allKd", allKd);
            validate_non_negative_index("Rd2", "allKd", allKd);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Rd2(allKd, allKd);
            stan::math::initialize(Rd2, DUMMY_VAR__);
            stan::math::fill(Rd2, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("chol_d", "allKd", allKd);
            validate_non_negative_index("chol_d", "allKd", allKd);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_d(allKd, allKd);
            stan::math::initialize(chol_d, DUMMY_VAR__);
            stan::math::fill(chol_d, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("chol_p", "allKp", allKp);
            validate_non_negative_index("chol_p", "allKp", allKp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_p(allKp, allKp);
            stan::math::initialize(chol_p, DUMMY_VAR__);
            stan::math::fill(chol_p, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("chol_g", "allKg", allKg);
            validate_non_negative_index("chol_g", "allKg", allKg);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_g(allKg, allKg);
            stan::math::initialize(chol_g, DUMMY_VAR__);
            stan::math::fill(chol_g, DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("augYd", "Nd", Nd);
            validate_non_negative_index("augYd", "allKd", allKd);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> augYd(Nd, allKd);
            stan::math::initialize(augYd, DUMMY_VAR__);
            stan::math::fill(augYd, DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("augYp", "Np", Np);
            validate_non_negative_index("augYp", "allKp", allKp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> augYp(Np, allKp);
            stan::math::initialize(augYp, DUMMY_VAR__);
            stan::math::fill(augYp, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 98;
            int idx1(0);
            (void) idx1;  // dummy to suppress unused var warning
            stan::math::fill(idx1, std::numeric_limits<int>::min());
            current_statement_begin__ = 99;
            int idx2(0);
            (void) idx2;  // dummy to suppress unused var warning
            stan::math::fill(idx2, std::numeric_limits<int>::min());
            current_statement_begin__ = 100;
            int idp1(0);
            (void) idp1;  // dummy to suppress unused var warning
            stan::math::fill(idp1, std::numeric_limits<int>::min());
            current_statement_begin__ = 101;
            int idp2(0);
            (void) idp2;  // dummy to suppress unused var warning
            stan::math::fill(idp2, std::numeric_limits<int>::min());
            current_statement_begin__ = 103;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 104;
                stan::math::assign(idx1, ((k * 2) - 1));
                current_statement_begin__ = 105;
                stan::math::assign(idx2, (k * 2));
                current_statement_begin__ = 108;
                stan::model::assign(S_d, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list()), 
                            get_base1(s_rr, k, "s_rr", 1), 
                            "assigning variable S_d");
                current_statement_begin__ = 109;
                stan::model::assign(S_d, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list()), 
                            get_base1(s_rr, k, "s_rr", 1), 
                            "assigning variable S_d");
                current_statement_begin__ = 110;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable Rd2");
                current_statement_begin__ = 111;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable Rd2");
                current_statement_begin__ = 112;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                            (-(1) + (2 * get_base1(r_d2, k, k, "r_d2", 1))), 
                            "assigning variable Rd2");
                current_statement_begin__ = 113;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                            (-(1) + (2 * get_base1(r_d2, k, k, "r_d2", 1))), 
                            "assigning variable Rd2");
                current_statement_begin__ = 116;
                if (as_bool(logical_lt(k, Kd2))) {
                    current_statement_begin__ = 116;
                    for (int kk = (k + 1); kk <= Kd2; ++kk) {
                        current_statement_begin__ = 117;
                        stan::math::assign(idp1, ((kk * 2) - 1));
                        current_statement_begin__ = 118;
                        stan::math::assign(idp2, (kk * 2));
                        current_statement_begin__ = 120;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idp1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 121;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idp2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 122;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp1), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 123;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp2), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 124;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idp2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 125;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp2), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 126;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idp1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 127;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp1), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                    }
                }
            }
            }
            current_statement_begin__ = 135;
            stan::math::assign(chol_d, diag_pre_multiply(S_d, cholesky_decompose(Rd2)));
            current_statement_begin__ = 137;
            stan::math::assign(chol_p, chol_r_p);
            current_statement_begin__ = 138;
            stan::math::assign(chol_g, chol_r_g);
            {
            current_statement_begin__ = 142;
            int idx1(0);
            (void) idx1;  // dummy to suppress unused var warning
            stan::math::fill(idx1, std::numeric_limits<int>::min());
            current_statement_begin__ = 143;
            int idx2(0);
            (void) idx2;  // dummy to suppress unused var warning
            stan::math::fill(idx2, std::numeric_limits<int>::min());
            current_statement_begin__ = 145;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 146;
                stan::math::assign(idx1, ((k * 2) - 1));
                current_statement_begin__ = 147;
                stan::math::assign(idx2, (k * 2));
                current_statement_begin__ = 149;
                for (int d = 1; d <= Nd; ++d) {
                    current_statement_begin__ = 151;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                ((get_base1(S_p, idx1, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 1, "IDp", 2), idx1, "AP", 1)) + (get_base1(S_p, idx2, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 2, "IDp", 2), idx2, "AP", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 152;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                ((get_base1(S_p, idx1, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 2, "IDp", 2), idx1, "AP", 1)) + (get_base1(S_p, idx2, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 1, "IDp", 2), idx2, "AP", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 158;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), "Yd2hat") + get_base1(Mvec, k, "Mvec", 1)), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 159;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), "Yd2hat") + get_base1(Mvec, k, "Mvec", 1)), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 164;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), "Yd2hat") + (get_base1(S_g, k, "S_g", 1) * get_base1(GG, get_base1(IDg, d, "IDg", 1), k, "GG", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 165;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), "Yd2hat") + (get_base1(S_g, k, "S_g", 1) * get_base1(GG, get_base1(IDg, d, "IDg", 1), k, "GG", 1))), 
                                "assigning variable Yd2hat");
                }
            }
            }
            current_statement_begin__ = 174;
            stan::math::assign(augYd, Yd2);
            current_statement_begin__ = 175;
            stan::math::assign(augYp, AP);
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 82;
            size_t Yd2hat_j_1_max__ = Nd;
            size_t Yd2hat_j_2_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < Yd2hat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Yd2hat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Yd2hat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Yd2hat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Yd2hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 84;
            size_t S_d_j_1_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < S_d_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(S_d(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: S_d" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_d: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 85;
            size_t Rd2_j_1_max__ = allKd;
            size_t Rd2_j_2_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < Rd2_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Rd2_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Rd2(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Rd2" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Rd2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 87;
            size_t chol_d_j_1_max__ = allKd;
            size_t chol_d_j_2_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < chol_d_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < chol_d_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(chol_d(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: chol_d" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable chol_d: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 88;
            size_t chol_p_j_1_max__ = allKp;
            size_t chol_p_j_2_max__ = allKp;
            for (size_t j_1__ = 0; j_1__ < chol_p_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < chol_p_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(chol_p(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: chol_p" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable chol_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 89;
            size_t chol_g_j_1_max__ = allKg;
            size_t chol_g_j_2_max__ = allKg;
            for (size_t j_1__ = 0; j_1__ < chol_g_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < chol_g_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(chol_g(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: chol_g" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable chol_g: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 93;
            size_t augYd_j_1_max__ = Nd;
            size_t augYd_j_2_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < augYd_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < augYd_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(augYd(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: augYd" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable augYd: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 94;
            size_t augYp_j_1_max__ = Np;
            size_t augYp_j_2_max__ = allKp;
            for (size_t j_1__ = 0; j_1__ < augYp_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < augYp_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(augYp(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: augYp" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable augYp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 180;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 183;
                lp_accum__.add(normal_log<propto__>(get_base1(Mvec, k, "Mvec", 1), get_base1(rr_Mvec_m, k, "rr_Mvec_m", 1), get_base1(rr_Mvec_sd, k, "rr_Mvec_sd", 1)));
                current_statement_begin__ = 185;
                lp_accum__.add(student_t_log<propto__>(get_base1(s_rr, k, "s_rr", 1), get_base1(rr_rel_t, k, 1, "rr_rel_t", 1), get_base1(rr_rel_t, k, 2, "rr_rel_t", 1), get_base1(rr_rel_t, k, 3, "rr_rel_t", 1)));
                if (get_base1(s_rr, k, "s_rr", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-student_t_ccdf_log(0, get_base1(rr_rel_t, k, 1, "rr_rel_t", 1), get_base1(rr_rel_t, k, 2, "rr_rel_t", 1), get_base1(rr_rel_t, k, 3, "rr_rel_t", 1)));
                current_statement_begin__ = 187;
                lp_accum__.add(student_t_log<propto__>(get_base1(S_p, ((2 * k) - 1), "S_p", 1), get_base1(rr_out_t, k, 1, "rr_out_t", 1), get_base1(rr_out_t, k, 2, "rr_out_t", 1), get_base1(rr_out_t, k, 3, "rr_out_t", 1)));
                if (get_base1(S_p, ((2 * k) - 1), "S_p", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-student_t_ccdf_log(0, get_base1(rr_out_t, k, 1, "rr_out_t", 1), get_base1(rr_out_t, k, 2, "rr_out_t", 1), get_base1(rr_out_t, k, 3, "rr_out_t", 1)));
                current_statement_begin__ = 189;
                lp_accum__.add(student_t_log<propto__>(get_base1(S_p, (2 * k), "S_p", 1), get_base1(rr_in_t, k, 1, "rr_in_t", 1), get_base1(rr_in_t, k, 2, "rr_in_t", 1), get_base1(rr_in_t, k, 3, "rr_in_t", 1)));
                if (get_base1(S_p, (2 * k), "S_p", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-student_t_ccdf_log(0, get_base1(rr_in_t, k, 1, "rr_in_t", 1), get_base1(rr_in_t, k, 2, "rr_in_t", 1), get_base1(rr_in_t, k, 3, "rr_in_t", 1)));
            }
            current_statement_begin__ = 193;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(chol_r_p, case_lkj));
            current_statement_begin__ = 194;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 196;
                lp_accum__.add(beta_log<propto__>(get_base1(r_d2, k, k, "r_d2", 1), get_base1(rr_beta_a, k, k, "rr_beta_a", 1), get_base1(rr_beta_b, k, k, "rr_beta_b", 1)));
                current_statement_begin__ = 198;
                if (as_bool(logical_lt(k, Kd2))) {
                    current_statement_begin__ = 198;
                    for (int kk = (k + 1); kk <= Kd2; ++kk) {
                        current_statement_begin__ = 199;
                        lp_accum__.add(beta_log<propto__>(get_base1(r_d2, kk, k, "r_d2", 1), get_base1(rr_beta_a, kk, k, "rr_beta_a", 1), get_base1(rr_beta_b, kk, k, "rr_beta_b", 1)));
                        current_statement_begin__ = 200;
                        lp_accum__.add(beta_log<propto__>(get_base1(r_d2, k, kk, "r_d2", 1), get_base1(rr_beta_a, k, kk, "rr_beta_a", 1), get_base1(rr_beta_b, k, kk, "rr_beta_b", 1)));
                    }
                }
            }
            current_statement_begin__ = 205;
            for (int n = 1; n <= Nd; ++n) {
                current_statement_begin__ = 205;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(stan::model::rvalue(augYd, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "augYd"), stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Yd2hat"), chol_d));
            }
            current_statement_begin__ = 206;
            for (int n = 1; n <= Np; ++n) {
                current_statement_begin__ = 206;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(stan::model::rvalue(augYp, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "augYp"), rep_row_vector(0, allKp), chol_p));
            }
            current_statement_begin__ = 211;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 212;
                lp_accum__.add(student_t_log<propto__>(get_base1(S_g, k, "S_g", 1), get_base1(rr_group_t, k, 1, "rr_group_t", 1), get_base1(rr_group_t, k, 2, "rr_group_t", 1), get_base1(rr_group_t, k, 3, "rr_group_t", 1)));
                if (get_base1(S_g, k, "S_g", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-student_t_ccdf_log(0, get_base1(rr_group_t, k, 1, "rr_group_t", 1), get_base1(rr_group_t, k, 2, "rr_group_t", 1), get_base1(rr_group_t, k, 3, "rr_group_t", 1)));
            }
            current_statement_begin__ = 216;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(chol_r_g, group_lkj));
            current_statement_begin__ = 220;
            for (int n = 1; n <= Ng; ++n) {
                current_statement_begin__ = 221;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(stan::model::rvalue(GG, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "GG"), rep_row_vector(0, Kd2), chol_g));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Mvec");
        names__.push_back("s_rr");
        names__.push_back("S_p");
        names__.push_back("chol_r_p");
        names__.push_back("r_d2");
        names__.push_back("AP");
        names__.push_back("GG");
        names__.push_back("S_g");
        names__.push_back("chol_r_g");
        names__.push_back("Yd2hat");
        names__.push_back("S_d");
        names__.push_back("Rd2");
        names__.push_back("chol_d");
        names__.push_back("chol_p");
        names__.push_back("chol_g");
        names__.push_back("augYd");
        names__.push_back("augYp");
        names__.push_back("Yd2e");
        names__.push_back("Rp");
        names__.push_back("pSigma");
        names__.push_back("dSigma");
        names__.push_back("Rg");
        names__.push_back("gSigma");
        names__.push_back("Rsq");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Kd2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kd2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kd2);
        dims__.push_back(Kd2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Np);
        dims__.push_back((2 * Kd2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ng);
        dims__.push_back(allKg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKg);
        dims__.push_back(allKg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nd);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKd);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKd);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKg);
        dims__.push_back(allKg);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nd);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Np);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nd);
        dims__.push_back(allKd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(allKp);
        dims__.push_back(allKp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kd2);
        dims__.push_back(Kd2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kd2);
        dims__.push_back(Kd2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kd2);
        dims__.push_back(4);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_RR_con_comp_gN_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> Mvec = in__.vector_constrain(Kd2);
        size_t Mvec_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < Mvec_j_1_max__; ++j_1__) {
            vars__.push_back(Mvec(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> s_rr = in__.vector_lb_constrain(0, Kd2);
        size_t s_rr_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < s_rr_j_1_max__; ++j_1__) {
            vars__.push_back(s_rr(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_p = in__.vector_lb_constrain(0, allKp);
        size_t S_p_j_1_max__ = allKp;
        for (size_t j_1__ = 0; j_1__ < S_p_j_1_max__; ++j_1__) {
            vars__.push_back(S_p(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_r_p = in__.cholesky_factor_corr_constrain(allKp);
        size_t chol_r_p_j_2_max__ = allKp;
        size_t chol_r_p_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < chol_r_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_p_j_1_max__; ++j_1__) {
                vars__.push_back(chol_r_p(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> r_d2 = in__.matrix_lub_constrain(0, 1, Kd2, Kd2);
        size_t r_d2_j_2_max__ = Kd2;
        size_t r_d2_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < r_d2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < r_d2_j_1_max__; ++j_1__) {
                vars__.push_back(r_d2(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> AP = in__.matrix_constrain(Np, (2 * Kd2));
        size_t AP_j_2_max__ = (2 * Kd2);
        size_t AP_j_1_max__ = Np;
        for (size_t j_2__ = 0; j_2__ < AP_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < AP_j_1_max__; ++j_1__) {
                vars__.push_back(AP(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> GG = in__.matrix_constrain(Ng, allKg);
        size_t GG_j_2_max__ = allKg;
        size_t GG_j_1_max__ = Ng;
        for (size_t j_2__ = 0; j_2__ < GG_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < GG_j_1_max__; ++j_1__) {
                vars__.push_back(GG(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_g = in__.vector_lb_constrain(0, allKg);
        size_t S_g_j_1_max__ = allKg;
        for (size_t j_1__ = 0; j_1__ < S_g_j_1_max__; ++j_1__) {
            vars__.push_back(S_g(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_r_g = in__.cholesky_factor_corr_constrain(allKg);
        size_t chol_r_g_j_2_max__ = allKg;
        size_t chol_r_g_j_1_max__ = allKg;
        for (size_t j_2__ = 0; j_2__ < chol_r_g_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_g_j_1_max__; ++j_1__) {
                vars__.push_back(chol_r_g(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 82;
            validate_non_negative_index("Yd2hat", "Nd", Nd);
            validate_non_negative_index("Yd2hat", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Yd2hat(Nd, allKd);
            stan::math::initialize(Yd2hat, DUMMY_VAR__);
            stan::math::fill(Yd2hat, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("S_d", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_d(allKd);
            stan::math::initialize(S_d, DUMMY_VAR__);
            stan::math::fill(S_d, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("Rd2", "allKd", allKd);
            validate_non_negative_index("Rd2", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rd2(allKd, allKd);
            stan::math::initialize(Rd2, DUMMY_VAR__);
            stan::math::fill(Rd2, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("chol_d", "allKd", allKd);
            validate_non_negative_index("chol_d", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_d(allKd, allKd);
            stan::math::initialize(chol_d, DUMMY_VAR__);
            stan::math::fill(chol_d, DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("chol_p", "allKp", allKp);
            validate_non_negative_index("chol_p", "allKp", allKp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_p(allKp, allKp);
            stan::math::initialize(chol_p, DUMMY_VAR__);
            stan::math::fill(chol_p, DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("chol_g", "allKg", allKg);
            validate_non_negative_index("chol_g", "allKg", allKg);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> chol_g(allKg, allKg);
            stan::math::initialize(chol_g, DUMMY_VAR__);
            stan::math::fill(chol_g, DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("augYd", "Nd", Nd);
            validate_non_negative_index("augYd", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> augYd(Nd, allKd);
            stan::math::initialize(augYd, DUMMY_VAR__);
            stan::math::fill(augYd, DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("augYp", "Np", Np);
            validate_non_negative_index("augYp", "allKp", allKp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> augYp(Np, allKp);
            stan::math::initialize(augYp, DUMMY_VAR__);
            stan::math::fill(augYp, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 98;
            int idx1(0);
            (void) idx1;  // dummy to suppress unused var warning
            stan::math::fill(idx1, std::numeric_limits<int>::min());
            current_statement_begin__ = 99;
            int idx2(0);
            (void) idx2;  // dummy to suppress unused var warning
            stan::math::fill(idx2, std::numeric_limits<int>::min());
            current_statement_begin__ = 100;
            int idp1(0);
            (void) idp1;  // dummy to suppress unused var warning
            stan::math::fill(idp1, std::numeric_limits<int>::min());
            current_statement_begin__ = 101;
            int idp2(0);
            (void) idp2;  // dummy to suppress unused var warning
            stan::math::fill(idp2, std::numeric_limits<int>::min());
            current_statement_begin__ = 103;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 104;
                stan::math::assign(idx1, ((k * 2) - 1));
                current_statement_begin__ = 105;
                stan::math::assign(idx2, (k * 2));
                current_statement_begin__ = 108;
                stan::model::assign(S_d, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list()), 
                            get_base1(s_rr, k, "s_rr", 1), 
                            "assigning variable S_d");
                current_statement_begin__ = 109;
                stan::model::assign(S_d, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list()), 
                            get_base1(s_rr, k, "s_rr", 1), 
                            "assigning variable S_d");
                current_statement_begin__ = 110;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable Rd2");
                current_statement_begin__ = 111;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable Rd2");
                current_statement_begin__ = 112;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                            (-(1) + (2 * get_base1(r_d2, k, k, "r_d2", 1))), 
                            "assigning variable Rd2");
                current_statement_begin__ = 113;
                stan::model::assign(Rd2, 
                            stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                            (-(1) + (2 * get_base1(r_d2, k, k, "r_d2", 1))), 
                            "assigning variable Rd2");
                current_statement_begin__ = 116;
                if (as_bool(logical_lt(k, Kd2))) {
                    current_statement_begin__ = 116;
                    for (int kk = (k + 1); kk <= Kd2; ++kk) {
                        current_statement_begin__ = 117;
                        stan::math::assign(idp1, ((kk * 2) - 1));
                        current_statement_begin__ = 118;
                        stan::math::assign(idp2, (kk * 2));
                        current_statement_begin__ = 120;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idp1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 121;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idp2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 122;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp1), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 123;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp2), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, kk, k, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 124;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx1), stan::model::cons_list(stan::model::index_uni(idp2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 125;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp2), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 126;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idx2), stan::model::cons_list(stan::model::index_uni(idp1), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                        current_statement_begin__ = 127;
                        stan::model::assign(Rd2, 
                                    stan::model::cons_list(stan::model::index_uni(idp1), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                    (-(1) + (2 * get_base1(r_d2, k, kk, "r_d2", 1))), 
                                    "assigning variable Rd2");
                    }
                }
            }
            }
            current_statement_begin__ = 135;
            stan::math::assign(chol_d, diag_pre_multiply(S_d, cholesky_decompose(Rd2)));
            current_statement_begin__ = 137;
            stan::math::assign(chol_p, chol_r_p);
            current_statement_begin__ = 138;
            stan::math::assign(chol_g, chol_r_g);
            {
            current_statement_begin__ = 142;
            int idx1(0);
            (void) idx1;  // dummy to suppress unused var warning
            stan::math::fill(idx1, std::numeric_limits<int>::min());
            current_statement_begin__ = 143;
            int idx2(0);
            (void) idx2;  // dummy to suppress unused var warning
            stan::math::fill(idx2, std::numeric_limits<int>::min());
            current_statement_begin__ = 145;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 146;
                stan::math::assign(idx1, ((k * 2) - 1));
                current_statement_begin__ = 147;
                stan::math::assign(idx2, (k * 2));
                current_statement_begin__ = 149;
                for (int d = 1; d <= Nd; ++d) {
                    current_statement_begin__ = 151;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                ((get_base1(S_p, idx1, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 1, "IDp", 2), idx1, "AP", 1)) + (get_base1(S_p, idx2, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 2, "IDp", 2), idx2, "AP", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 152;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                ((get_base1(S_p, idx1, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 2, "IDp", 2), idx1, "AP", 1)) + (get_base1(S_p, idx2, "S_p", 1) * get_base1(AP, get_base1(get_base1(IDp, d, "IDp", 1), 1, "IDp", 2), idx2, "AP", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 158;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), "Yd2hat") + get_base1(Mvec, k, "Mvec", 1)), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 159;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), "Yd2hat") + get_base1(Mvec, k, "Mvec", 1)), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 164;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx1), stan::model::nil_index_list())), "Yd2hat") + (get_base1(S_g, k, "S_g", 1) * get_base1(GG, get_base1(IDg, d, "IDg", 1), k, "GG", 1))), 
                                "assigning variable Yd2hat");
                    current_statement_begin__ = 165;
                    stan::model::assign(Yd2hat, 
                                stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Yd2hat, stan::model::cons_list(stan::model::index_uni(d), stan::model::cons_list(stan::model::index_uni(idx2), stan::model::nil_index_list())), "Yd2hat") + (get_base1(S_g, k, "S_g", 1) * get_base1(GG, get_base1(IDg, d, "IDg", 1), k, "GG", 1))), 
                                "assigning variable Yd2hat");
                }
            }
            }
            current_statement_begin__ = 174;
            stan::math::assign(augYd, Yd2);
            current_statement_begin__ = 175;
            stan::math::assign(augYp, AP);
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Yd2hat_j_2_max__ = allKd;
                size_t Yd2hat_j_1_max__ = Nd;
                for (size_t j_2__ = 0; j_2__ < Yd2hat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Yd2hat_j_1_max__; ++j_1__) {
                        vars__.push_back(Yd2hat(j_1__, j_2__));
                    }
                }
                size_t S_d_j_1_max__ = allKd;
                for (size_t j_1__ = 0; j_1__ < S_d_j_1_max__; ++j_1__) {
                    vars__.push_back(S_d(j_1__));
                }
                size_t Rd2_j_2_max__ = allKd;
                size_t Rd2_j_1_max__ = allKd;
                for (size_t j_2__ = 0; j_2__ < Rd2_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Rd2_j_1_max__; ++j_1__) {
                        vars__.push_back(Rd2(j_1__, j_2__));
                    }
                }
                size_t chol_d_j_2_max__ = allKd;
                size_t chol_d_j_1_max__ = allKd;
                for (size_t j_2__ = 0; j_2__ < chol_d_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < chol_d_j_1_max__; ++j_1__) {
                        vars__.push_back(chol_d(j_1__, j_2__));
                    }
                }
                size_t chol_p_j_2_max__ = allKp;
                size_t chol_p_j_1_max__ = allKp;
                for (size_t j_2__ = 0; j_2__ < chol_p_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < chol_p_j_1_max__; ++j_1__) {
                        vars__.push_back(chol_p(j_1__, j_2__));
                    }
                }
                size_t chol_g_j_2_max__ = allKg;
                size_t chol_g_j_1_max__ = allKg;
                for (size_t j_2__ = 0; j_2__ < chol_g_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < chol_g_j_1_max__; ++j_1__) {
                        vars__.push_back(chol_g(j_1__, j_2__));
                    }
                }
                size_t augYd_j_2_max__ = allKd;
                size_t augYd_j_1_max__ = Nd;
                for (size_t j_2__ = 0; j_2__ < augYd_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < augYd_j_1_max__; ++j_1__) {
                        vars__.push_back(augYd(j_1__, j_2__));
                    }
                }
                size_t augYp_j_2_max__ = allKp;
                size_t augYp_j_1_max__ = Np;
                for (size_t j_2__ = 0; j_2__ < augYp_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < augYp_j_1_max__; ++j_1__) {
                        vars__.push_back(augYp(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 225;
            validate_non_negative_index("Yd2e", "Nd", Nd);
            validate_non_negative_index("Yd2e", "allKd", allKd);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Yd2e(Nd, allKd);
            stan::math::initialize(Yd2e, DUMMY_VAR__);
            stan::math::fill(Yd2e, DUMMY_VAR__);
            current_statement_begin__ = 226;
            validate_non_negative_index("Rp", "allKp", allKp);
            validate_non_negative_index("Rp", "allKp", allKp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rp(allKp, allKp);
            stan::math::initialize(Rp, DUMMY_VAR__);
            stan::math::fill(Rp, DUMMY_VAR__);
            current_statement_begin__ = 227;
            validate_non_negative_index("pSigma", "allKp", allKp);
            validate_non_negative_index("pSigma", "allKp", allKp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> pSigma(allKp, allKp);
            stan::math::initialize(pSigma, DUMMY_VAR__);
            stan::math::fill(pSigma, DUMMY_VAR__);
            current_statement_begin__ = 228;
            validate_non_negative_index("dSigma", "allKp", allKp);
            validate_non_negative_index("dSigma", "allKp", allKp);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> dSigma(allKp, allKp);
            stan::math::initialize(dSigma, DUMMY_VAR__);
            stan::math::fill(dSigma, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("Rg", "Kd2", Kd2);
            validate_non_negative_index("Rg", "Kd2", Kd2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rg(Kd2, Kd2);
            stan::math::initialize(Rg, DUMMY_VAR__);
            stan::math::fill(Rg, DUMMY_VAR__);
            current_statement_begin__ = 231;
            validate_non_negative_index("gSigma", "Kd2", Kd2);
            validate_non_negative_index("gSigma", "Kd2", Kd2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> gSigma(Kd2, Kd2);
            stan::math::initialize(gSigma, DUMMY_VAR__);
            stan::math::fill(gSigma, DUMMY_VAR__);
            current_statement_begin__ = 234;
            validate_non_negative_index("Rsq", "Kd2", Kd2);
            validate_non_negative_index("Rsq", "4", 4);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Rsq(Kd2, 4);
            stan::math::initialize(Rsq, DUMMY_VAR__);
            stan::math::fill(Rsq, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 238;
            validate_non_negative_index("vars", "Kd2", Kd2);
            validate_non_negative_index("vars", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vars(Kd2, 4);
            stan::math::initialize(vars, DUMMY_VAR__);
            stan::math::fill(vars, DUMMY_VAR__);
            current_statement_begin__ = 239;
            validate_non_negative_index("totals", "Kd2", Kd2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> totals(Kd2);
            stan::math::initialize(totals, DUMMY_VAR__);
            stan::math::fill(totals, DUMMY_VAR__);
            current_statement_begin__ = 241;
            for (int k = 1; k <= Kd2; ++k) {
                current_statement_begin__ = 242;
                stan::model::assign(vars, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            square(get_base1(S_g, k, "S_g", 1)), 
                            "assigning variable vars");
                current_statement_begin__ = 243;
                stan::model::assign(vars, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            square(get_base1(S_p, ((2 * k) - 1), "S_p", 1)), 
                            "assigning variable vars");
                current_statement_begin__ = 244;
                stan::model::assign(vars, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            square(get_base1(S_p, (2 * k), "S_p", 1)), 
                            "assigning variable vars");
                current_statement_begin__ = 245;
                stan::model::assign(vars, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                            square(get_base1(s_rr, k, "s_rr", 1)), 
                            "assigning variable vars");
                current_statement_begin__ = 247;
                stan::model::assign(totals, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(vars, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "vars")), 
                            "assigning variable totals");
                current_statement_begin__ = 248;
                stan::model::assign(Rsq, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            elt_divide(stan::model::rvalue(vars, stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "vars"), get_base1(totals, k, "totals", 1)), 
                            "assigning variable Rsq");
            }
            }
            current_statement_begin__ = 254;
            stan::math::assign(Rg, multiply_lower_tri_self_transpose(chol_r_g));
            {
            current_statement_begin__ = 257;
            validate_non_negative_index("chol_g_all", "allKg", allKg);
            validate_non_negative_index("chol_g_all", "allKg", allKg);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_g_all(allKg, allKg);
            stan::math::initialize(chol_g_all, DUMMY_VAR__);
            stan::math::fill(chol_g_all, DUMMY_VAR__);
            current_statement_begin__ = 258;
            stan::math::assign(chol_g_all, diag_pre_multiply(S_g, chol_r_g));
            current_statement_begin__ = 259;
            stan::math::assign(gSigma, multiply_lower_tri_self_transpose(chol_g_all));
            }
            current_statement_begin__ = 263;
            stan::math::assign(Yd2e, subtract(augYd, Yd2hat));
            current_statement_begin__ = 266;
            stan::math::assign(Rp, multiply_lower_tri_self_transpose(chol_r_p));
            {
            current_statement_begin__ = 269;
            validate_non_negative_index("chol_p_all", "allKp", allKp);
            validate_non_negative_index("chol_p_all", "allKp", allKp);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> chol_p_all(allKp, allKp);
            stan::math::initialize(chol_p_all, DUMMY_VAR__);
            stan::math::fill(chol_p_all, DUMMY_VAR__);
            current_statement_begin__ = 270;
            stan::math::assign(chol_p_all, diag_pre_multiply(S_p, chol_r_p));
            current_statement_begin__ = 271;
            stan::math::assign(pSigma, multiply_lower_tri_self_transpose(chol_p_all));
            }
            current_statement_begin__ = 274;
            stan::math::assign(dSigma, multiply_lower_tri_self_transpose(chol_d));
            // validate, write generated quantities
            current_statement_begin__ = 225;
            size_t Yd2e_j_2_max__ = allKd;
            size_t Yd2e_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < Yd2e_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Yd2e_j_1_max__; ++j_1__) {
                    vars__.push_back(Yd2e(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 226;
            size_t Rp_j_2_max__ = allKp;
            size_t Rp_j_1_max__ = allKp;
            for (size_t j_2__ = 0; j_2__ < Rp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rp_j_1_max__; ++j_1__) {
                    vars__.push_back(Rp(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 227;
            size_t pSigma_j_2_max__ = allKp;
            size_t pSigma_j_1_max__ = allKp;
            for (size_t j_2__ = 0; j_2__ < pSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pSigma_j_1_max__; ++j_1__) {
                    vars__.push_back(pSigma(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 228;
            size_t dSigma_j_2_max__ = allKp;
            size_t dSigma_j_1_max__ = allKp;
            for (size_t j_2__ = 0; j_2__ < dSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < dSigma_j_1_max__; ++j_1__) {
                    vars__.push_back(dSigma(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 230;
            size_t Rg_j_2_max__ = Kd2;
            size_t Rg_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < Rg_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rg_j_1_max__; ++j_1__) {
                    vars__.push_back(Rg(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 231;
            size_t gSigma_j_2_max__ = Kd2;
            size_t gSigma_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < gSigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < gSigma_j_1_max__; ++j_1__) {
                    vars__.push_back(gSigma(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 234;
            size_t Rsq_j_2_max__ = 4;
            size_t Rsq_j_1_max__ = Kd2;
            for (size_t j_2__ = 0; j_2__ < Rsq_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rsq_j_1_max__; ++j_1__) {
                    vars__.push_back(Rsq(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_RR_con_comp_gN";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Mvec_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < Mvec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Mvec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t s_rr_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < s_rr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "s_rr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_p_j_1_max__ = allKp;
        for (size_t j_1__ = 0; j_1__ < S_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t chol_r_p_j_2_max__ = allKp;
        size_t chol_r_p_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < chol_r_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chol_r_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t r_d2_j_2_max__ = Kd2;
        size_t r_d2_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < r_d2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < r_d2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_d2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t AP_j_2_max__ = (2 * Kd2);
        size_t AP_j_1_max__ = Np;
        for (size_t j_2__ = 0; j_2__ < AP_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < AP_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "AP" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t GG_j_2_max__ = allKg;
        size_t GG_j_1_max__ = Ng;
        for (size_t j_2__ = 0; j_2__ < GG_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < GG_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "GG" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t S_g_j_1_max__ = allKg;
        for (size_t j_1__ = 0; j_1__ < S_g_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_g" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t chol_r_g_j_2_max__ = allKg;
        size_t chol_r_g_j_1_max__ = allKg;
        for (size_t j_2__ = 0; j_2__ < chol_r_g_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < chol_r_g_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chol_r_g" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Yd2hat_j_2_max__ = allKd;
            size_t Yd2hat_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < Yd2hat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Yd2hat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Yd2hat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t S_d_j_1_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < S_d_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_d" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rd2_j_2_max__ = allKd;
            size_t Rd2_j_1_max__ = allKd;
            for (size_t j_2__ = 0; j_2__ < Rd2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rd2_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rd2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_d_j_2_max__ = allKd;
            size_t chol_d_j_1_max__ = allKd;
            for (size_t j_2__ = 0; j_2__ < chol_d_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_d_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_d" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_p_j_2_max__ = allKp;
            size_t chol_p_j_1_max__ = allKp;
            for (size_t j_2__ = 0; j_2__ < chol_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_g_j_2_max__ = allKg;
            size_t chol_g_j_1_max__ = allKg;
            for (size_t j_2__ = 0; j_2__ < chol_g_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_g_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_g" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t augYd_j_2_max__ = allKd;
            size_t augYd_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < augYd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < augYd_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "augYd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t augYp_j_2_max__ = allKp;
            size_t augYp_j_1_max__ = Np;
            for (size_t j_2__ = 0; j_2__ < augYp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < augYp_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "augYp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Yd2e_j_2_max__ = allKd;
        size_t Yd2e_j_1_max__ = Nd;
        for (size_t j_2__ = 0; j_2__ < Yd2e_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Yd2e_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yd2e" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rp_j_2_max__ = allKp;
        size_t Rp_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < Rp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pSigma_j_2_max__ = allKp;
        size_t pSigma_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < pSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < pSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t dSigma_j_2_max__ = allKp;
        size_t dSigma_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < dSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < dSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rg_j_2_max__ = Kd2;
        size_t Rg_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < Rg_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rg" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gSigma_j_2_max__ = Kd2;
        size_t gSigma_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < gSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < gSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rsq_j_2_max__ = 4;
        size_t Rsq_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < Rsq_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rsq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rsq" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Mvec_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < Mvec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Mvec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t s_rr_j_1_max__ = Kd2;
        for (size_t j_1__ = 0; j_1__ < s_rr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "s_rr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_p_j_1_max__ = allKp;
        for (size_t j_1__ = 0; j_1__ < S_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t chol_r_p_j_1_max__ = ((allKp * (allKp - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < chol_r_p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chol_r_p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t r_d2_j_2_max__ = Kd2;
        size_t r_d2_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < r_d2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < r_d2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_d2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t AP_j_2_max__ = (2 * Kd2);
        size_t AP_j_1_max__ = Np;
        for (size_t j_2__ = 0; j_2__ < AP_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < AP_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "AP" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t GG_j_2_max__ = allKg;
        size_t GG_j_1_max__ = Ng;
        for (size_t j_2__ = 0; j_2__ < GG_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < GG_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "GG" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t S_g_j_1_max__ = allKg;
        for (size_t j_1__ = 0; j_1__ < S_g_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_g" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t chol_r_g_j_1_max__ = ((allKg * (allKg - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < chol_r_g_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "chol_r_g" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Yd2hat_j_2_max__ = allKd;
            size_t Yd2hat_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < Yd2hat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Yd2hat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Yd2hat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t S_d_j_1_max__ = allKd;
            for (size_t j_1__ = 0; j_1__ < S_d_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "S_d" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Rd2_j_2_max__ = allKd;
            size_t Rd2_j_1_max__ = allKd;
            for (size_t j_2__ = 0; j_2__ < Rd2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Rd2_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Rd2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_d_j_2_max__ = allKd;
            size_t chol_d_j_1_max__ = allKd;
            for (size_t j_2__ = 0; j_2__ < chol_d_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_d_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_d" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_p_j_2_max__ = allKp;
            size_t chol_p_j_1_max__ = allKp;
            for (size_t j_2__ = 0; j_2__ < chol_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_p_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t chol_g_j_2_max__ = allKg;
            size_t chol_g_j_1_max__ = allKg;
            for (size_t j_2__ = 0; j_2__ < chol_g_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < chol_g_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "chol_g" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t augYd_j_2_max__ = allKd;
            size_t augYd_j_1_max__ = Nd;
            for (size_t j_2__ = 0; j_2__ < augYd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < augYd_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "augYd" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t augYp_j_2_max__ = allKp;
            size_t augYp_j_1_max__ = Np;
            for (size_t j_2__ = 0; j_2__ < augYp_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < augYp_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "augYp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t Yd2e_j_2_max__ = allKd;
        size_t Yd2e_j_1_max__ = Nd;
        for (size_t j_2__ = 0; j_2__ < Yd2e_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Yd2e_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Yd2e" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rp_j_2_max__ = allKp;
        size_t Rp_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < Rp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t pSigma_j_2_max__ = allKp;
        size_t pSigma_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < pSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < pSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t dSigma_j_2_max__ = allKp;
        size_t dSigma_j_1_max__ = allKp;
        for (size_t j_2__ = 0; j_2__ < dSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < dSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rg_j_2_max__ = Kd2;
        size_t Rg_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < Rg_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rg" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gSigma_j_2_max__ = Kd2;
        size_t gSigma_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < gSigma_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < gSigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gSigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Rsq_j_2_max__ = 4;
        size_t Rsq_j_1_max__ = Kd2;
        for (size_t j_2__ = 0; j_2__ < Rsq_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Rsq_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Rsq" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_RR_con_comp_gN_namespace::model_RR_con_comp_gN stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
